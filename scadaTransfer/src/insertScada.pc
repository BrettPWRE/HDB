/* insertScada
* 
* Purpose: Insert or update hourly data into the r_hour table;
* function is passed 5 arguments a date, a site_datatype_id, a sourceId,
* a validation flag and an array of 24 values

* all twenty four of these values are either inserted or updated into
* the r_hour table
*
* Return
* OK or ERROR
*
* COMMENTS
*
* AUTHOR - EDITORS
* Tom Ryan with assistance from Carol Marra January 1996
*****************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stropts.h>
#include "dbutils.h"
#include "utils.h"
#include "defines.h"
#include "scadaTransfer.h"
#include "typedefs.h"


EXEC SQL INCLUDE sqlca;


#define FUNC_NAME "insertScada"

int insertScada (SQL_DATE *formattedDates,int site_datatype_id, float *vals_array,ID sourceId,
		 char *validationFlag)

/* an important consideration here is to make sure that the size of SLQ variables  is consistent 
   with the database.  Nearly all data (if not all) values in the database are 16 byte floats.  
   If one declares the vals arrary below as a float, it will create an array of 8 byte floats not
   16 byte floats.  This could get one into trouble.  Thus always use the data type VALUE which 
   has been defined as a 16 byte float */
	
{
 EXEC SQL BEGIN DECLARE SECTION;
 SQL_DATE      date_time;
 VALUE         vals[NUM_HOURS];
 ID            sdi,s_id;
 char          val_Flag[2];

 EXEC SQL END DECLARE SECTION;

 int         i,
             result;
 char        tableName[25];


 strncpy(val_Flag,validationFlag,1);
 val_Flag[1]='\0';
 s_id = sourceId;
 sdi = site_datatype_id;
 strcpy(tableName,"r_hour");

 for (i=0; i < NUM_HOURS; i++)
   { 
     vals[i]=vals_array[i];
     strcpy (date_time, formattedDates[i]);

     /* the update is very tricky because the dates must match
	we pull the date out and convert to a char with the to_char function, using
        upper case as date_time has a capitalized three character month.  The
	comparison is case sensitive */
     EXEC SQL UPDATE r_hour
       SET value = :vals[i],source_id = :s_id,validation = :val_Flag
	 where site_datatype_id = :sdi
	   and date_hour = :date_time;
     
     /* see if a record was updated; if not (sqlca.sqlcode > 0), then insert the record */
     if (sqlca.sqlcode > 0)
       {
	 EXEC SQL INSERT INTO r_hour(site_datatype_id,date_hour,value,source_id,validation)
	   VALUES
	     (:sdi, :date_time, :vals[i], :s_id, :val_Flag);

	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem inserting value %10.2f for SDI: %d DATE: %s into %s.\n\tExiting.",vals[i], sdi, date_time, tableName)) != OK)
	   {
	     EXEC SQL ROLLBACK;
	     return (ERROR);
	     
	   }
       }
     /* Print informative message if update happened */
     else if (sqlca.sqlcode == 0)
       {
	 printf("Warning - Data for this record (%19s) was updated not inserted\n",date_time);
       }
     
     /* Make sure there is not an error on the update */
       else
	 {
	   if ((result = SqlErrorHandler 
		(FUNC_NAME, FALSE,
		 "Problem updating value for SDI: %d DATE: %s into %s.\n\tExiting.", sdi, date_time, tableName)) != OK)
	     {
	       EXEC SQL ROLLBACK;
	       return (ERROR);
	     }
	 }
   }
 EXEC SQL COMMIT;
 return (OK);
 
}

/*********************************************************************/
#define FUNC_NAME "SqlSetDateFormat"

int SqlSetDateFormat ()
{

  int result;

  EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS';

  if ((result = SqlErrorHandler 
       (FUNC_NAME, TRUE,
	"Problem setting date format")) != OK)
    {
      EXEC SQL ROLLBACK;
      return (ERROR);
    }

  return (OK);
}
