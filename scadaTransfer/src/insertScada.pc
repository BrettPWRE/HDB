/* insertScada
* 
* Purpose: Insert or update hourly data into the r_hour table;
* function is passed 5 arguments a date, a site_datatype_id, a sourceId,
* a validation flag and an array of 24 values

* all twenty four of these values are either inserted or updated into
* the r_hour table
*
* Return
* OK or ERROR
*
* COMMENTS
*
* AUTHOR - EDITORS
* Tom Ryan with assistance from Carol Marra January 1996
*****************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stropts.h>
#include "dbutils.h"
#include "utils.h"
#include "defines.h"
#include "scadaTransfer.h"
#include "typedefs.h"
#include "Lookup.h"


EXEC SQL INCLUDE sqlca;

extern ID agen_id,collection_system_id,loading_application_id,method_id,computation_id;

static lookup=1;

#define FUNC_NAME "insertScada"

int insertScada (SQL_DATE *formattedDates,int site_datatype_id, float *vals_array,ID sourceId,
		 char *validationFlag)

/* an important consideration here is to make sure that the size of SLQ variables  is consistent 
   with the database.  Nearly all data (if not all) values in the database are 16 byte floats.  
   If one declares the vals arrary below as a float, it will create an array of 8 byte floats not
   16 byte floats.  This could get one into trouble.  Thus always use the data type VALUE which 
   has been defined as a 16 byte float */
	
{
 EXEC SQL BEGIN DECLARE SECTION;
 SQL_DATE      date_time;
 SQL_DATE      end_date_time;
 VALUE         vals;
 ID            sdi,s_id;
 char          val_Flag[2];
 VALUE         oldvalue;

 EXEC SQL END DECLARE SECTION;

 int         i,
             result;
 short       NULL_INDICATOR = -1;
 char        tableName[25];

 if(lookup)
 {
   SqlLookupIds("Bureau of Reclamation","SCADA","scadaTransfer","unknown","unknown");
   /*agen_name,collection_system_name,
     loading_application_name,method_name,computation_name);*/
   lookup = 0;
 }

 strncpy(val_Flag,validationFlag,1);
 val_Flag[1]='\0';
 s_id = sourceId;
 sdi = site_datatype_id;
 strcpy(tableName,"r_hour");

 for (i=0; i < NUM_HOURS; i++)
   { 
     vals=vals_array[i];
     strcpy (date_time, formattedDates[i]);

     /* the update is very tricky because the dates must match
	we pull the date out and convert to a char with the to_char function, using
        upper case as date_time has a capitalized three character month.  The
	comparison is case sensitive 
modify_r_base_raw  ( SITE_DATATYPE_ID NUMBER,
			      INTERVAL VARCHAR2,
			      START_DATE_TIME DATE,
			      END_DATE_TIME DATE,
			      VALUE FLOAT,
			      OVERWRITE_FLAG VARCHAR2,
			      VALIDATION CHAR,
                              AGEN_ID NUMBER,
                              COLLECTION_SYSTEM_ID NUMBER,
                              LOADING_APPLICATION_ID NUMBER,
                              METHOD_ID NUMBER,
                              COMPUTATION_ID NUMBER,
			      DO_UPDATE_Y_OR_N VARCHAR2 ) 

*/
     EXEC SQL SELECT value into :oldvalue from r_base where
       	   site_datatype_id = :sdi
	   and start_date_time = :date_time
           and interval = 'hour'
	   and value <> :vals;
     
     /* see if a record was available; if so (sqlca.sqlcode <= 0), then complain */
     if (sqlca.sqlcode <= 0)
       {
	 printf("Warning - Data for this record (%19s) will be updated not inserted\n",date_time);

       }

/* placing the null_indicator after the end_date_time will always pass a null in that position */
     EXEC SQL EXECUTE
       begin
       uchdba.modify_r_base_raw(:sdi,'hour',:date_time,:end_date_time:NULL_INDICATOR, :vals ,:agen_id,
				null,:val_Flag,:collection_system_id,
				:loading_application_id,:method_id,
				:computation_id,'Y');
       end;
       END-EXEC;
	
   }
 EXEC SQL COMMIT;
 return (OK);
 
}

/*********************************************************************/
#define FUNC_NAME "SqlSetDateFormat"

/* int SqlSetDateFormat (char *) */
/* { */

/*   EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS'; */

/* int result; */

/*   if ((result = SqlErrorHandler  */
/*        (FUNC_NAME, TRUE, */
/* 	"Problem setting date format")) != OK) */
/*     { */
/*       EXEC SQL ROLLBACK; */
/*       return (ERROR); */
/*     } */

/*   return (OK); */
/* } */
