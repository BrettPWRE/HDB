/*****************************************************************************
* DESCRIPTION
*
* This file contains the SQL functions associated with the methods  
* that derive the data upward to the next interval 
*
***************************************
*
* SqlSelectData
*
* Purpose: Retrieves source data for the derivation from one of the
*          interval tables.
*
* Input:   UPDATE_RECORD* - pointer to the record to be derived
*          DATE_TIME* - pointer to begin of source window
*          DATE_TIME* - pointer to end of source window
*
* Output:  int* - pointer to an integer that will contain the number of
*                 source records retrieved
*          DATA_RECORD** - reference to a pointer to a list that will contain 
*                          the source data records retrieved
*
* Return:  int - OK or ERROR
*
***************************************
*
* SqlDeleteDestination
*
* Purpose: Deletes any existing value from the destination slot in the
*          destination table
*
* Input:   SQL_INTERVAL - destination interval to delete record from
*          int - destination site_datatype_id
*          SQL_DATE - start_date_time for destination slot
*          SQL_DATE - end_date_time for destination slot
*
* Output:  None
*
* Return:  int - OK or ERROR
*
***************************************
*
* SqlIntervalUpdate
*
* Purpose: Writes an entry to r_interval_update for the destination slot 
*          to continue the propagation of the derivation upward
*
* Input:   SQL_INTERVAL - destination interval to write record for
*          int - destination site_datatype_id
*          SQL_DATE - start_date_time for destination slot
*          SQL_DATE - end_date_time for destination slot
*
* Output:  None
*
* Return:  int - OK or ERROR
*
***************************************
*
* SqlConvertUnit
*
* Purpose: Determines if a unit conversion is required in deriving
*          from the source to the destination and converts the units,
*          if required
*
* Input:   SQL_INTERVAL - destination interval for the derivation
*          UPDATE_RECORD* - pointer to the record to be derived
*          
* Input/Output:  DATA_RECORD* - pointer to the resulting data record
*                which contains the value to be converted
*
* Return:  int - OK or ERROR
*
***************************************
*
* SqlWriteResult
*
* Purpose: Writes the results of the derivation to the destination
*          table
*
* Input:   SQL_INTERVAL - destination interval for the derivation
*          DATA_RECORD* - pointer to the resulting data record
*
* Output:  None
*
* Return:  int - OK or ERROR
*
***************************************
*
* Author
*
* Neil Wilson
* November, 2001
****************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "utils.h"
#include "dbutils.h"
#include "defines.h"
#include "typedefs.h"
#include "derivation.h"
#include "derivationTypedefs.h"

extern FILE* LOGFILE;

EXEC SQL INCLUDE sqlca;


#define FUNC_NAME "SqlSelectData"

int SqlSelectData(UPDATE_RECORD* updateRecord,
                  SQL_DATE beginTime,
                  SQL_DATE endTime,
                  int* sourceCount,
                  DATA_RECORD** sourceList )
{
   /* This function retrieves source data from one of the interval tables */

   /* NOTE:  THE USER OF THIS METHOD IS RESPONSIBLE FOR FREEING THE MEMORY
             THAT IS ALLOCATED TO sourceList BY MALLOC IF SOURCE DATA IS
             RETRIEVED */

   EXEC SQL BEGIN DECLARE SECTION;
      char sqlSelectStatement[600];
      DATA_RECORD* sqlDataRecord;
   EXEC SQL END DECLARE SECTION;

   char selectStatement[600];
   int result;
   int sourceIndex;

   /* Get the count of data in the source data window */
   /* NOTE:  This select statement must be structured generically so that
      it works with any of the interval tables (at this time - instant,
      other, hour, day, month, year, wy).  In all cases the start time
      for selected data must be greater than or equal to the beginTime of 
      the window.  The start time less than the endTime of the window 
      condition is necessary to screen out instantaneous values with a
      start and end time equal to the endTime of the window (this end of
      the window instant is not actually part of the interval but is 
      equal to the start time of the next interval).  The end time 
      condition of less than or equal to the endTime of the window
      screens out "other" interval values that can be irregular and run over
      the endTime cut off. Business interval values will already be
      normalized and have end dates equal to the end of the intervals */
   sprintf(selectStatement, "SELECT COUNT(*) FROM r_%s WHERE site_datatype_id = %d AND start_date_time >= TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND start_date_time < TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND end_date_time <= TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS')", updateRecord->interval, updateRecord->siteDatatypeId, beginTime, endTime, endTime);

   if ((result = SqlSelectCount(selectStatement, sourceCount)) != OK)
   {
      FilePrintError(LOGFILE, "Problem querying row count of source data in r_%s\n",
                  updateRecord->interval);
      return (ERROR);
   }

   /* Create array of data structures to hold the source data */
   if (*sourceCount)
   {
      if ((*sourceList = (DATA_RECORD *) malloc 
         (sizeof(DATA_RECORD) * (*sourceCount))) == NULL)
      {
         FilePrintError(LOGFILE, "Problem allocating memory for sourceList\n");
         return (ERROR);
      }
   }
   else
   {
      *sourceList = NULL;
      return (OK);
   }

   /* Prepare the select statement for the source data */
   sprintf (sqlSelectStatement, "SELECT site_datatype_id, TO_CHAR (start_date_time, 'DD-MON-YYYY HH24:MI:SS'), TO_CHAR (end_date_time, 'DD-MON-YYYY HH24:MI:SS'), value FROM r_%s WHERE site_datatype_id = %d AND start_date_time >= TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND start_date_time < TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND end_date_time <= TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS')ORDER BY start_date_time", updateRecord->interval, updateRecord->siteDatatypeId, beginTime, endTime, endTime);

   EXEC SQL PREPARE sel FROM :sqlSelectStatement;
   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE,
                 "Problem preparing select statement: %s...\n",
                 sqlSelectStatement)) != OK)
   {
      return (ERROR);
   }

   /* Declare source_data_cursor to select source data */
   EXEC SQL DECLARE source_data_cursor CURSOR FOR sel;
   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                 "Problem declaring source_data_cursor for: %s...\n",
                 sqlSelectStatement)) != OK)
   {
      return (ERROR);
   }

   /* Open source_data_cursor */
   EXEC SQL OPEN source_data_cursor;
   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE,
                 "Problem opening source_data_cursor for\n: %s...\n",
                 sqlSelectStatement)) != OK)
   {
      return (ERROR);
   }

   EXEC SQL WHENEVER NOT FOUND GOTO close_source_data_cursor;

   /* Fetch applicable source data */ 
   for (sourceIndex = 0; sourceIndex < *sourceCount ;
        sourceIndex++)
   {
      sqlDataRecord = &((*sourceList)[sourceIndex]);

      EXEC SQL FETCH source_data_cursor INTO
                       :sqlDataRecord->siteDatatypeId, 
                       :sqlDataRecord->startDateTime,
                       :sqlDataRecord->endDateTime,
                       :sqlDataRecord->value;
      if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE,
           "Problem fetching source_data_cursor for\n: %s...\n",
           sqlSelectStatement)) != OK)
      {
         EXEC SQL ROLLBACK;
         return (ERROR);
      }
   }

   /* Close source_data_cursor */
   close_source_data_cursor:
   EXEC SQL CLOSE source_data_cursor;
   EXEC SQL COMMIT;
   EXEC SQL WHENEVER NOT FOUND CONTINUE;   
   
   return (OK);
}

/****************************************************************************/
#define FUNC_NAME "SqlDeleteDestination"

int SqlDeleteDestination(SQL_INTERVAL destInterval,
                         int destSDI,
                         SQL_DATE startDateTime,
                         SQL_DATE endDateTime)
{
   /* This function deletes any existing value in the destination table */

   EXEC SQL BEGIN DECLARE SECTION;
      char sqlDeleteStatement[600];
   EXEC SQL END DECLARE SECTION;

   int result;

   /* Prepare and execute the delete statement */
   sprintf (sqlDeleteStatement, "DELETE FROM r_%s WHERE site_datatype_id = %d AND start_date_time = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND end_date_time = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS')", destInterval, destSDI, startDateTime, endDateTime);

   EXEC SQL PREPARE del FROM :sqlDeleteStatement;

   EXEC SQL EXECUTE del;

   /* TRUE used in second argument to SqlFilePrintErrorHandler because it
      is OK if no rows were processed above - means a value hadn't 
      been previously written to the destination table */
   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, TRUE, 
        "Problem deleting data record from r_%s\n", 
        destInterval)) != OK)
   {
      EXEC SQL ROLLBACK;
      return (ERROR);
   }     

   EXEC SQL COMMIT;    
   return (OK);
}

/****************************************************************************/
#define FUNC_NAME "SqlIntervalUpdate"

int SqlIntervalUpdate(SQL_INTERVAL destInterval,
                      int destSDI,
                      SQL_DATE startDateTime,
                      SQL_DATE endDateTime)
{
   /* This function writes an entry to r_interval_update to continue the
      propagation of the derivation upward */

   EXEC SQL BEGIN DECLARE SECTION;
      int sqlCount;
      int sqlDestSDI;
      SQL_DATE sqlStartDateTime;
      SQL_DATE sqlEndDateTime;
      SQL_INTERVAL sqlDestInterval;
   EXEC SQL END DECLARE SECTION;

   int result;

   /* If the entry is to be for year or wy, the entry is not needed for further
      propagation */
   if ( (!strcmp(destInterval, "year")) || (!strcmp(destInterval, "wy")))
   {
      return (OK);
   }

   /* Initialize the sql variables */
   strcpy (sqlDestInterval, destInterval);
   strcpy (sqlStartDateTime, startDateTime);
   strcpy (sqlEndDateTime, endDateTime);
   sqlDestSDI = destSDI;

   /* Do a count to see if the record already exists */
   EXEC SQL
      SELECT COUNT(*) INTO :sqlCount
      FROM r_interval_update 
      WHERE site_datatype_id = :sqlDestSDI
         AND start_date_time = TO_DATE (:sqlStartDateTime,
                                  'DD-MON-YYYY HH24:MI:SS')
         AND end_date_time = TO_DATE (:sqlEndDateTime,
                                  'DD-MON-YYYY HH24:MI:SS')
         AND interval = :sqlDestInterval;

   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                 "Problem querying for count of data in r_interval_update\n"))
                 != OK)
   {
      EXEC SQL ROLLBACK;
      return (ERROR);
   }

   /* If count is nonzero, record exists and does not need to be written */
   /* If count is zero, the record needs to be inserted */
   if (sqlCount == 0)
   {
      EXEC SQL
         INSERT INTO r_interval_update( 
            site_datatype_id,
            start_date_time,
            end_date_time,
            interval)
         VALUES (
            :sqlDestSDI,
            TO_DATE (:sqlStartDateTime,
                     'DD-MON-YYYY HH24:MI:SS'),
            TO_DATE (:sqlEndDateTime,
                     'DD-MON-YYYY HH24:MI:SS'),
            :sqlDestInterval);

      if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                    "Problem inserting row into r_interval_update\n")
                    )!= OK)
      {
         EXEC SQL ROLLBACK;
         return (ERROR);
      } 
   }

   EXEC SQL COMMIT;    
   return (OK);
}

/****************************************************************************/
#define FUNC_NAME "SqlConvertUnit"

int SqlConvertUnit(SQL_INTERVAL destInterval,
                   UPDATE_RECORD* updateRecord,
                   DATA_RECORD* resultRecord)
{
   /* This function determines if a unit conversion is required in deriving
      from the source to the destination and converts the units, if required */

   EXEC SQL BEGIN DECLARE SECTION;
      ID sqlDestUnitId;
      ID sqlSourceUnitId;
      int sqlDestSDI;
      int sqlSourceSDI;
   EXEC SQL END DECLARE SECTION;

   double resultValue;
   int result;
   TIME_INTERVAL_TYPES intervalType;

   /* Initialize sql variables */
   sqlSourceSDI = updateRecord->siteDatatypeId;
   sqlDestSDI = resultRecord->siteDatatypeId;

   /* Retrieve the unit id for the source SDI */
   EXEC SQL
      SELECT d.unit_id
      INTO :sqlSourceUnitId
      FROM hdb_site_datatype s, hdb_datatype d
      WHERE s.datatype_id = d.datatype_id
         AND s.site_datatype_id = :sqlSourceSDI;

   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                 "Problem retrieving unit_id for source SDI %d\n", 
                 sqlSourceSDI))!= OK)
   {
      EXEC SQL ROLLBACK;
      return (ERROR);
   }

   /* Retrieve the unit id for the destination SDI */
   EXEC SQL
      SELECT d.unit_id
      INTO :sqlDestUnitId
      FROM hdb_site_datatype s, hdb_datatype d
      WHERE s.datatype_id = d.datatype_id
         AND s.site_datatype_id = :sqlDestSDI;

   if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                 "Problem retrieving unit_id for destination SDI %d\n", 
                  sqlDestSDI))!= OK)
   {
      EXEC SQL ROLLBACK;
      return (ERROR);
   }

   /* Compare the unit ids and convert if required */
   if (sqlSourceUnitId != sqlDestUnitId)
   {
      /* First the TIME_INTERVAL_TYPES must be determined */
      if (!strncmp(destInterval, "ho", 2))
      {
         intervalType = BY_HOUR;
      }
      else if (!strncmp(destInterval, "da", 2))
      {
         intervalType = BY_DAY;
      } 
      else if (!strncmp(destInterval, "mo", 2))
      {
         intervalType = BY_MONTH;
      } 
      else if (!strncmp(destInterval, "ye", 2))
      {
         intervalType = BY_YEAR;
      } 
      else if (!strncmp(destInterval, "wy", 2))
      {
         intervalType = BY_WY;
      }
      else
      {
         FilePrintError(LOGFILE, "Code to determine the TIME_INTERVAL_TYPES for the interval named %s needs to be written in the function SqlConvertUnit\n", destInterval);
         return (ERROR);      
      }

      /* Call the ConvertValue function */
      if ((result = ConvertValue(resultRecord->value,
                    1,
                    sqlSourceUnitId,
                    resultRecord->startDateTime,
                    &resultValue,
                    1,
                    sqlDestUnitId,
                    intervalType,
                    NA)) != OK)
      {
         FilePrintError(LOGFILE, "Problem figuring unit conversion for the site_datatypes %d to %d\n", sqlSourceSDI, sqlDestSDI);
         return (ERROR);
      }

      /* Assign the converted value */
      resultRecord->value = resultValue;
   }

   EXEC SQL COMMIT;    
   return (OK);
}

/****************************************************************************/
#define FUNC_NAME "SqlWriteResult"

int SqlWriteResult(SQL_INTERVAL destInterval,
                   DATA_RECORD* resultRecord)
{
   /* This function writes the results of the derivation to the destination
      table */

   EXEC SQL BEGIN DECLARE SECTION;
      char sqlStatement[600];
   EXEC SQL END DECLARE SECTION;

   char tempFlag[20];
   char selectStatement[600];
   int destCount;
   int result;

   /* Find out if derivation flag value should be NULL and assign it to 
      the variable */
   if (!strcmp(resultRecord->derivationFlag, EMPTY_STRING))
   {
      sprintf(resultRecord->derivationFlag, "NULL");
   }
   else
   {
      /* add single quotes around flag value for the sql statements */
      strcpy(tempFlag, resultRecord->derivationFlag);
      sprintf(resultRecord->derivationFlag, "'%s'", tempFlag);
   }

   /* Find out if this row already exists in the destination table */
   sprintf(selectStatement, "SELECT COUNT(*) FROM r_%s WHERE site_datatype_id = %d AND start_date_time = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND end_date_time = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS')", destInterval, resultRecord->siteDatatypeId, resultRecord->startDateTime, resultRecord->endDateTime);

   if ((result = SqlSelectCount(selectStatement, &destCount)) != OK)
   {
      FilePrintError(LOGFILE, "Problem querying row count in r_%s\n", destInterval);
      return (ERROR);
   }

   /* If record doesn't exist, insert it */
   if (destCount == 0)
   {
      sprintf(sqlStatement, "INSERT INTO r_%s (site_datatype_id, start_date_time, end_date_time, value, overwrite_flag, method_id, derivation_flags, date_time_loaded, validation) VALUES (%d, TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS'), TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS'), %f, NULL, %d, %s, TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS'), NULL)", destInterval, resultRecord->siteDatatypeId, resultRecord->startDateTime, resultRecord->endDateTime, resultRecord->value, resultRecord->methodId, resultRecord->derivationFlag, resultRecord->dateTimeLoaded);

      EXEC SQL PREPARE ins FROM :sqlStatement;

      EXEC SQL EXECUTE ins;

      if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                    "Problem inserting data record into r_%s\n", 
                    destInterval)) != OK)
      {
         EXEC SQL ROLLBACK;
         return (ERROR);
      }       
   }
   /* Record exists, so is an update */
   else
   {
      sprintf(sqlStatement, "UPDATE r_%s SET value = %f, method_id = %d, derivation_flags = %s, date_time_loaded = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') WHERE site_datatype_id = %d AND start_date_time = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS') AND end_date_time = TO_DATE ('%s', 'DD-MON-YYYY HH24:MI:SS')", destInterval, resultRecord->value, resultRecord->methodId, resultRecord->derivationFlag, resultRecord->dateTimeLoaded, resultRecord->siteDatatypeId, resultRecord->startDateTime, resultRecord->endDateTime);

      EXEC SQL PREPARE upd FROM :sqlStatement;

      EXEC SQL EXECUTE upd;

      if ((result = SqlFilePrintErrorHandler(LOGFILE, FUNC_NAME, FALSE, 
                    "Problem updating data record in r_%s\n", 
                    destInterval)) != OK)
      {
         EXEC SQL ROLLBACK;
         return (ERROR);
      }       
   }

   EXEC SQL COMMIT;    
   return (OK);
}

