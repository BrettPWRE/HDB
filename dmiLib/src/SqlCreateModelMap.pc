/****************************************************************************
**
**	IDENTIFICATION SECTION
**	----------------------
**
**	Module Name:	int createModelmap(model_run_map *map, 
**                          int count) 
**
**	File Name:	createModelmap.sc
**
**	Date Written:	Augest, 1996
**
**	Author(s): 	Yue Wu
**
**	Module Description:	
**	routine to find an appropriate model_run_id for each wildcard users
**	  specified in their metaControl file. At this point, the wildcards
**        are stored in structure array "map".
**		
**      Variables Passed In:  
**         model_run_map *map = structure array containing the wildcards and 
**              correponding model_run_id found later.  
**         int count = the number of wildcards 
**
*****************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

/*  hdb apps include file to define OK and ERROR  */
#include <dbutils.h>
#include <utils.h>
#include <defines.h>
#include <typedefs.h>

/*  hdb dmi stuff */
#include <dmi_utils.h>

#define BUFFERSIZE 500

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "SqlGetModelIdArray"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlGetModelIdArray

<P> <STRONG>Function signature:</STRONG> int SqlGetModelIdArray(model_map[MAPSIZE], int *)

<P> <STRONG>Function description:</STRONG> Selects all model IDs and names from hdb_model and loads them into an array.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> model_map map[MAPSIZE]: Array of model IDs and names; output.
<BR><DD> int *counter:           Number of elements in array; output.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int SqlGetModelIdArray(model_map map[MAPSIZE], int *counter)
{
 EXEC SQL BEGIN DECLARE SECTION;
   char      operateStmt[500];
   varchar   name[100];
   ID       Id;
 EXEC SQL END DECLARE SECTION; 

 int     result;

  sprintf(operateStmt, "SELECT model_id, model_name FROM hdb_model ORDER BY model_id ASC");

  /* Prepare the select statement; and open a cursor */
  EXEC SQL AT :current_dbsite DECLARE sel STATEMENT;
  EXEC SQL PREPARE sel FROM :operateStmt;
  if ((result = SqlErrorHandler
       (FUNC_NAME, FALSE, "Problem preparing sel.")) != OK)
    {
      return (ERROR);
    }

  EXEC SQL WHENEVER NOT FOUND goto close_c1;
  EXEC SQL DECLARE c1 CURSOR FOR sel;

  if ((result = SqlErrorHandler
       (FUNC_NAME, FALSE, "Problem declaring cursor c1.")) != OK)
    {
      EXEC SQL CLOSE c1;
      return (ERROR);
    }

  EXEC SQL OPEN c1;
  if ((result = SqlErrorHandler
       (FUNC_NAME, FALSE, "Problem opening cursor c1.")) != OK)
    {
      EXEC SQL CLOSE c1;
      return (ERROR);
    }

  for (*counter = 0; ;(*counter)++)
    {
      EXEC SQL FETCH c1 INTO :Id,:name;
      if ((result = SqlErrorHandler
           (FUNC_NAME, TRUE, 
            "Problem fetching into ref_model on row %d.", *counter)) != OK)
        {
          EXEC SQL CLOSE c1;
          return (ERROR);
        }
      strncpy(map[*counter].name, name.arr, name.len);   
      map[*counter].name[name.len] = '\0';
      map[*counter].modelId = Id;
    }

  close_c1:
    EXEC SQL CLOSE c1;
    EXEC SQL AT :current_dbsite COMMIT;

  return (OK);
}

#define FUNC_NAME "GetSpecData"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> GetSpecData

<P> <STRONG>Function signature:</STRONG> int GetSpecData(model_run[MAPSIZE], int *, int *)

<P> <STRONG>Function description:</STRONG> Read specification of model_runs from a file created by TCL.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> model_run spec[MAPSIZE]: Array of model_run specifications. Output.
<BR><DD> int *count:              Number of elements in array; output.
<BR><DD> int *status:             Status of array loading; used by calling function. Output.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int GetSpecData(model_run spec[MAPSIZE], int *count, int *status)
{
   FILE *fptr1;
   int i;
   char tmp[3];
   char s[MAX_STACK_DEPTH];
   
   if((fptr1 = fopen(WRITESPEC, "r")) == NULL)
   {
      printf("DMI: Failure to open WRITESPEC file %s\n", WRITESPEC);
      return (ERROR);
   }
   /*printf("test\n");*/
   if(fgets(tmp, 3, fptr1) != NULL) 
   {
      switch(tmp[0]) 
      {
          case 'Q':
	     *status = QUIT;
	     break;
          case 'N':
	     *status = NOSPECDATA;
	     break;
          case 'Y':
	     *status = SPECDATA;
	     break;
      }
   }
   if (*status == QUIT)
   {
      fclose(fptr1);
      return(ERROR);
   }   
   i = 0;
   while(fgets(s,100,fptr1) != NULL)
   {
      s[strlen(s)-1] = '\0';
      strcpy(spec[i].code,s);
      fgets(s, 100, fptr1);
      s[strlen(s)-1] = '\0';
      spec[i].modelRunId = atoi(s);
      fgets(s, 100, fptr1);
      s[strlen(s)-1] = '\0';
      spec[i].modelId = atoi(s);
      fgets(spec[i].sysDate, 100, fptr1);
      spec[i].sysDate[strlen(spec[i].sysDate)-1] = '\0';
      fgets(spec[i].runDate, 100, fptr1);
      spec[i].runDate[strlen(spec[i].runDate)-1] = '\0';
      fgets(s, 100, fptr1);
      s[strlen(s)-1] = '\0';
      spec[i].prob = atoi(s);
      fgets(spec[i].modelType, 100, fptr1);
      spec[i].modelType[strlen(spec[i].modelType)-1] = '\0';
      fgets(s, 100, fptr1);
      s[strlen(s)-1] = '\0';
      spec[i].userId = atoi(s);
      fgets(spec[i].startDate, 100, fptr1);
      spec[i].startDate[strlen(spec[i].startDate)-1] = '\0';
      fgets(spec[i].endDate, 100, fptr1);
      spec[i].endDate[strlen(spec[i].endDate)-1] = '\0';
      fgets(spec[i].timeStep, 100, fptr1);
      spec[i].timeStep[strlen(spec[i].timeStep)-1] = '\0';
      /*printf("%s\n", spec[i].code);
	printf("%d\n",spec[i].modelId);
	printf("%s\n",spec[i].sysDate);
	printf("%s\n",spec[i].runDate);
	printf("%d\n",spec[i].prob);
	printf("%s\n",spec[i].modelType);
	printf("%d\n",spec[i].userId);
	printf("%s\n",spec[i].startDate);
	printf("%s\n",spec[i].endDate);
	printf("%d, %s\n", i,s);*/
      i++;
   }
   fclose(fptr1);
   /*printf("TEST3\n");*/
   *count = i;
   return (OK);
} 

#define FUNC_NAME "WriteToFiles"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> WriteToFiles

<P> <STRONG>Function signature:</STRONG> int WriteToFiles(model_run[MAPSIZE],int,model_run_map[MAPSIZE],int)

<P> <STRONG>Function description:</STRONG> Write model_run specifications to a file.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> model_run spec[MAPSIZE]:    Array of model_run specifications.
<BR><DD> int *counter:               Number of elements in spec array.
<BR><DD> model_run_map map[MAPSIZE]: Array of model_run_maps (user code mapped onto modelRunId).
<BR><DD> int *count:                 Number of elements in map array.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int WriteToFiles(model_run spec[MAPSIZE],int counter,model_run_map map[MAPSIZE],int count)
{
   int i,j,c,flag,flag1;
   int position[MAX_STACK_DEPTH];
   FILE *fptr1, *fptr2;
   
   /*printf("WriteToFiles: %d\n", counter);*/
   if((fptr1 = fopen(ERROR1,"w")) == NULL)
   {
      printf("DMI: Failure to open ERROR file %s\n",ERROR1);
      return(ERROR);
   }
   
   if((fptr2 = fopen(ERROR2,"w")) == NULL)
   {
      printf("DMI: Failure to open ERROR file %s\n",ERROR2);
      return(ERROR);
   }
   
   flag = 0;
   flag1 =0;
   for (i=0; i < count; i++)
   {
      c = 0;
      for (j=0; j < counter; j++)
      {
	 /*printf("%s, %d\n", spec[j].code, spec[j].modelRunId);*/
	 if (!strcmp(map[i].code, spec[j].code))
	 {
	    position[c] = j;
	    c++;
	 }
      }
      if (c == 1)
      {
	 if (spec[position[c-1]].modelRunId != NA)
	 {
	    map[i].modelRunId = spec[position[c-1]].modelRunId;
	 }
	 else
	 {
	    if (flag1 == 0)
	    {
	       fprintf(fptr2, "%s", map[i].code);
	       flag1 = 1;
	    }
	    else {
               fprintf(fptr2, "\n%s", map[i].code);
	    }
	 }
      }
      else
      {
	 for (j=0; j < c; j++)
	 {
	    if (flag == 0) 
	    {
	       fprintf(fptr1, "%s", spec[position[j]].code);
	       flag = 1;
	    }
	    else
	    {
	       fprintf(fptr1, "\n%s", spec[position[j]].code);
	    }
	    fprintf(fptr1, "\n%d", spec[position[j]].modelRunId);
	    if(spec[position[j]].modelId == NA)
	    {
	       fprintf(fptr1, "\n  ");
	    }
	    else
	    {
	       fprintf(fptr1, "\n%d", spec[position[j]].modelId);
	    }
	    fprintf(fptr1, "\n%s", spec[position[j]].sysDate);
	    fprintf(fptr1, "\n%s", spec[position[j]].runDate);
	    if(spec[position[j]].prob == NA)
	    {
	       fprintf(fptr1, "\n  ");
	    }
	    else
	    {
	       fprintf(fptr1, "\n%d", spec[position[j]].prob);
	    }
	    fprintf(fptr1, "\n%s", spec[position[j]].modelType);
	    if(spec[position[j]].userId == NA)
	    {
	       fprintf(fptr1, "\n  ");
	    }
	    else
	    {
	       fprintf(fptr1, "\n%d", spec[position[j]].userId);
	    }
	    fprintf(fptr1, "\n%s", spec[position[j]].startDate);
	    fprintf(fptr1, "\n%s", spec[position[j]].endDate);
	    fprintf(fptr1, "\n%s", spec[position[j]].timeStep);
	 }
      }
   }
   fclose(fptr1);
   fclose(fptr2);
   return (OK);
}

#define FUNC_NAME "ReadTkFile"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> ReadTkFile

<P> <STRONG>Function signature:</STRONG> int ReadTkFile(model_run_map, int)

<P> <STRONG>Function description:</STRONG> Reads model_run codes and IDs from TK file and loads array.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> model_run_map map[MAPSIZE]: Array of model_run_maps (user code mapped onto modelRunId). Output.
<BR><DD> int count:                  Number of map elements in file.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int ReadTkFile(model_run_map map[MAPSIZE], int count)
{
  FILE *fptr1;
  char s[MAX_STACK_DEPTH];
  int i;

  if((fptr1 = fopen(SAVECHOICE,"r")) == NULL)
    {
      return(OK);
    }
  
  while(fgets(s, 100, fptr1) != NULL)
    {
      s[strlen(s)-1] = '\0';
      for (i=0; i < count; i++)
        {
/*printf("%s, %s\n", map[i].code, s);*/
          if (!strcmp(map[i].code, s))
            {
              fgets(s, 100, fptr1);
              map[i].modelRunId = atoi(s);
/*printf("%s, %s, %d\n", map[i].code, s, atoi(s));*/
              strcpy(s,"\0");
            }
        }
    }
  fclose(fptr1);
  return (OK);
}

#define FUNC_NAME "SqlSearchModelRunIdInput"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> SqlSearchModelRunIdOutput

<P> <STRONG>Function signature:</STRONG> int SqlSearchModelRunIdInput(model_run[MAPSIZE], model_run[MAPSIZE], int *)

<P> <STRONG>Function description:</STRONG> Returns all information about the model_run_ids which match the indicated spec, by querying HDB and loading the results into the array search_results.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> model_run search_results[MAPSIZE]: Array of model_run_ids which match the spec, and their attributes. Output.
<BR><DD> model_run spec[MAPSIZE]: Specification for desired model_run_id(s).
<BR><DD> int *n_of_records_found: Number of model_run_ids matching the spec. Output.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int SqlSearchModelRunIdInput(model_run search_results[MAPSIZE], 
			     model_run spec[MAPSIZE], int *n_of_records_found)
{
   EXEC SQL BEGIN DECLARE SECTION;
   char      operateStmt[1000];
   varchar   modelType[6],
             timeStep[20];
   SQL_DATE  sysDate,
      runDate,
      startDate,
      endDate;
   ID        runId,
      modelId,
      prob,
      userId;
   short int mt_null,
      syd_null,
      rd_null,
      ts_null,
      sd_null,
      ed_null,
      md_null,
      pr_null,
      ui_null;
   EXEC SQL END DECLARE SECTION; 
   
   int     result;
   int     i, j, flag, limit;
   char    line[50];
   
   /*   j = *n_of_records_found;*/
   j = 0;
   limit = modelRunMapCount;

   for(i = 0; i < limit; i++)
   {
      /*create the select statement
       NOTE:  we put on a WHERE at the end; will NULL it out later if not
       needed */
      sprintf(operateStmt, "SELECT model_run_id, model_id, to_char(sys_date, 'dd-mon-yyyy hh24:mi:ss'), to_char(run_date, 'dd-mon-yyyy'), probability, modeltype, user_id, to_char(start_date, 'dd-mon-yyyy'), to_char(end_date, 'dd-mon-yyyy'), time_step_descriptor FROM ref_model_run WHERE ");
      flag = 0;

      /*If specification of model_id*/
      if (spec[i].modelRunId != 0)
      {
	 sprintf(line, "model_run_id = %d and ", spec[i].modelRunId);
	 strcat(operateStmt, line);
	 spec[i].modelRunId = NA;
	 flag = 1;
      }      
      if (spec[i].modelId != 0) 
      {
	 sprintf(line, "model_id = %d and ", spec[i].modelId);
	 strcat(operateStmt, line);
	 flag = 1;
      }      
      /* ??? */
      if (strcmp(spec[i].sysDate, "\0"))
      {
	 sprintf(line, "to_char (sys_date, 'dd-mon-yyyy') = '%s' and ", 
		 spec[i].sysDate);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      if (strcmp(spec[i].runDate, "\0"))
      {
	 sprintf(line, "to_char (run_date, 'dd-mon-yyyy') = '%s' and ", 
		 spec[i].runDate);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      if (spec[i].prob != NA)
      {
	 sprintf(line, "probability = %d and ", spec[i].prob);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      if (strcmp(spec[i].modelType, "\0"))
      {
	 sprintf(line, "modeltype = '%s' and ", spec[i].modelType);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      if (spec[i].userId != NA)
      {
	 sprintf(line, "user_id = %d and ", spec[i].userId);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      /* ??? */
      if (strcmp(spec[i].startDate, "\0"))
      {
	 sprintf(line, "to_char (start_date, 'dd-mon-yyyy') = '%s' and ", 
		 spec[i].startDate);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      /* ??? */
      if (strcmp(spec[i].endDate, "\0"))
      {
	 sprintf(line, "to_char (end_date, 'dd-mon-yyyy') = '%s' and ", 
		 spec[i].endDate);
	 strcat(operateStmt, line);
	 flag = 1;
      }
      
      /*Need to get rid of the last 'and' statement, because there is an 
	extra */
      if(flag == 1)
	 operateStmt[strlen(operateStmt) - 4] = '\0';
      /* Need to get rid of the WHERE at the end of the statement, because 
	 nothing was specified for the search*/
      if(flag == 0)
	 operateStmt[strlen(operateStmt) - 6] = '\0';
      sprintf (line, "ORDER BY model_run_id ASC");
      strcat(operateStmt, line);
      
      /* Prepare the select statement; and open a cursor */
      if (flag) {
	 EXEC SQL AT :current_dbsite DECLARE sel2 STATEMENT;
	 EXEC SQL PREPARE sel2 FROM :operateStmt;
	 result = SqlErrorHandler(FUNC_NAME, FALSE, "Problem preparing sel2.");

	 if (result != OK)
	    return (ERROR);
	 
	 EXEC SQL WHENEVER NOT FOUND goto close_c1;
	 EXEC SQL DECLARE c2 CURSOR FOR sel2;
	 
	 result = SqlErrorHandler(FUNC_NAME, FALSE, 
				  "Problem declaring cursor c2.");
	 if(result != OK)
	 {
            EXEC SQL CLOSE c2;
            return (ERROR);
	 }
	 
	 EXEC SQL OPEN c2;
	 if ((result = SqlErrorHandler
	      (FUNC_NAME, FALSE, "Problem opening cursor c2.")) != OK)
	 {
            EXEC SQL CLOSE c2;
            return (ERROR);
	 }
	 flag = 0;
	 runId = NA;
	 while(TRUE) /*SQL will automatically go to close_c1 when it can't read
		       anymore model_runs  */
	 {
            EXEC SQL FETCH c2 INTO :runId,:modelId:md_null,:sysDate:syd_null,
               :runDate:rd_null,
	       :prob:pr_null,:modelType:mt_null,:userId:ui_null,
	       :startDate:sd_null,:endDate:ed_null,:timeStep:ts_null;
            if ((result = SqlErrorHandler
	        (FUNC_NAME, TRUE, 
		 "Problem fetching into Ref_Model_Run on row %d.\n", j)) != OK)
	    {
	       EXEC SQL CLOSE c2;
	       return (ERROR);
	    }
            strcpy(search_results[j].code, spec[i].code);
            search_results[j].modelRunId = runId;
            if(md_null == -1)	
	       search_results[j].modelId = NA;
            else 
	       search_results[j].modelId = modelId;
            if(syd_null == -1) 
	       strcpy(search_results[j].sysDate, "\0"); 
            else 
	       strcpy(search_results[j].sysDate, sysDate);
            if(rd_null == -1) 
	       strcpy(search_results[j].runDate, "\0"); 
            else 
	       strcpy(search_results[j].runDate, runDate);
            if(pr_null == -1) 
	       search_results[j].prob = NA;
            else 
	       search_results[j].prob = prob;
            if(mt_null == -1) 
	       strcpy(search_results[j].modelType, "\0");
            else 
	    {
	       strncpy(search_results[j].modelType, modelType.arr, 
		       modelType.len);
	       search_results[j].modelType[modelType.len] = '\0';
	    }
            if(ui_null == -1) 
	       search_results[j].userId = NA;
            else 
	       search_results[j].userId = userId;
            if(sd_null == -1) 
	       strcpy(search_results[j].startDate, "\0");
            else 
	       strcpy(search_results[j].startDate, startDate);
            if(ed_null == -1) 
	       strcpy(search_results[j].endDate, "\0");
            else 
	       strcpy(search_results[j].endDate, endDate);
            if(ts_null == -1) 
	       strcpy(search_results[j].timeStep, "\0");
            else 
	       {
		  strncpy(search_results[j].timeStep, timeStep.arr, 
			  timeStep.len);
		  search_results[j].timeStep[timeStep.len] = '\0';
	       }
	    j++;
	 }
      close_c1:
	 EXEC SQL CLOSE c2;
	 EXEC SQL AT :current_dbsite COMMIT;
      }
      /*      if (search_results[i].modelRunId == 0) 
	      search_results[i].modelRunId = NA;
	      */
   }
   *n_of_records_found = j;
   return (OK);
}

#define FUNC_NAME "rmTextFile"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> rmTextFile

<P> <STRONG>Function signature:</STRONG> void rmTextFile (void)

<P> <STRONG>Function description:</STRONG> Removes .hdb files generated by TK from working directory.

<P><DL> <STRONG>Function arguments:</STRONG>
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
void rmTextFile(void)
{
   printf("Removing the .hdb files from working directory.\n\n");
   if(!remove(READMODEL))
      printf("Cannot remove  %s\n", READMODEL);
   printf(".");
   if(!remove(READCODE))
      printf("Cannot remove  %s\n", READCODE);
   printf(".");
   if(!remove(WRITESPEC))
      printf("Cannot remove  %s\n", WRITESPEC);
   printf(".");
   if(!remove(SAVECHOICE))
      printf("Cannot remove  %s\n", SAVECHOICE);
   printf(".");
   if(!remove(ERROR1))
      printf("Cannot remove  %s\n", ERROR1);
   printf(".");
   if(!remove(ERROR2))
      printf("Cannot remove  %s\n", ERROR2);
   printf(".");
   printf("\n");
}

#define FUNC_NAME "mapList"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> mapList

<P> <STRONG>Function signature:</STRONG> int mapList(dmi_header_struct **)

<P> <STRONG>Function description:</STRONG> Sets model and historical data sources on all elements of the list.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> dmi_header_struct **list: List of object/slots to be processed by DMI.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int mapList(dmi_header_struct **list)
{
   dmi_header_struct *tmp;
   
   tmp = (*list);
   while (tmp != NULL)
   {
      if (tmp->model_source <= 0)
      {
	 if (tmp->model_source == 0) tmp->model_source = modelRunMap[0].modelRunId;
	 else 
	 {
	    tmp->model_source = modelRunMap[0-tmp->model_source].modelRunId;
	 }
      }
      printf("ModelSource: %s, %s, %d\n",tmp->object_name,tmp->slot_name, tmp->model_source);
      
      if (tmp->hist_source <= 0 && tmp->hist_source != REAL_DATA_TABLE)
      {
	 tmp->hist_source = modelRunMap[0-tmp->hist_source].modelRunId;
      } 
      printf("HistSource: %s, %s, %d\n",tmp->object_name,tmp->slot_name, tmp->hist_source);
      
      tmp = tmp->next;
   }
   return (OK);
}




