/*
**
**	IDENTIFICATION SECTION
**	----------------------
* DmiCharToNumericDate
*
*   Converts a character-based Oracle date to pure numeric format. Note that 
*   the input date must have an hour/minute/second portion.
*
* Purpose: Converts a date like '10-dec-1995 12:00:00' to '10/12/1995 12:00:00'
*          This is used by the dmi routines so can convert to RiverWare date 
*          format.
*
* NOTE: This behavior is new to the Oracle version. The Ingres version returned
*       a date in format mm/dd/yyyy; this version returns dd/mm/yyyy because
*       of necessary changes to other date functions.
* Input
*       char *              - char date
*	                      MUST BE IN dd-mon-yyyy hh24:mi:ss format!!
*       char *              - resulting numeric date
* Output
*       char * - calculated date/time WITHOUT ANY CHARACTERS IN MONTH
*
* Return
*       ERROR - date/time not successfully converted
*       OK - date successfully converted
*
*
*****************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
/*  hdb apps include file to define OK and ERRO  */
#include "typedefs.h"
#include "defines.h"
#include "dbutils.h"
#include "utils.h"
#include "dmi_utils.h"

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "riverwareToHdbDate"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> riverwareToHdbDate

<P> <STRONG>Function signature:</STRONG> int riverwareToHdbDate (char *, SQL_DATE, char *)

<P> <STRONG>Function description:</STRONG> Converts date in Riverware format to HDB format; e.g., yyyy-mm-dd -> dd-mon-yyyy.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> char *riverwareDate:  Date in Riverware format (yyyy-mm-dd).
<BR><DD> SQL_DATE hdbDate: Date in HDB format (dd-mon-yyyy). Output.
<BR><DD> char *timestep:   Timestep represented by the date.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int riverwareToHdbDate(char *riverwareDate, SQL_DATE hdbDate, char *timestep)
{
  int year, 
      month, 
      day, 
      hour = 0,
      minute = 0,
      second = 0;
  
  if (riverwareDate != NULL && hdbDate != NULL) 
    {
      /* Hourly -- subtract one hour */
      if (!strcmp (timestep, HOUR)) /* AND IF AVG DATA */
	{
	  if(sscanf(riverwareDate, "%d-%d-%d %d:%d:%d", &year, &month, &day,
		    &hour, &minute, &second) < 4) 
	    {
	      PrintError("DMI: Error interpreting prysm date (%s).\n", 
			 riverwareDate);
	      hdbDate[0] = '\0';
	      return ERROR;
	    }

	  sprintf(hdbDate, "%02d-%02d-%04d %02d:%02d:%02d", day, month,  
		  year, hour - 1, minute, second);
	}

      /* Daily -- just set the hours to 00. */
      else if (!strcmp (timestep, DAY)) 
	{
	  if(sscanf(riverwareDate, "%d-%d-%d", &year, &month, &day) != 3) 
	    {
	      PrintError("DMI: Error interpreting prysm date (%s).\n", 
			 riverwareDate);
	      hdbDate[0] = '\0';
	      return ERROR;
	    }
	  
	  sprintf(hdbDate, "%02d-%02d-%04d 00:00:00", day, month, year);
	}

      /* Month -- set hours to 00, use first day of month. */
      else if (!strcmp (timestep, MONTH))
	{
	  if(sscanf(riverwareDate, "%d-%d-%d", &year, &month, &day) != 3) 
	    {
	      PrintError("DMI: Error interpreting prysm date (%s).\n", 
			 riverwareDate);
	      hdbDate[0] = '\0';
	      return ERROR;
	    }
	  
	  sprintf(hdbDate, "01-%02d-%04d 00:00:00", month, year);
	}

      /* Unknown timestep */
      else
	{
	  PrintError ("DMI: Timestep %s cannot be processed by riverwareToHdbDate.\n\tExiting.", timestep);
	  hdbDate[0] = '\0';
	  return (ERROR);
	}
    }
  else 
    {
      PrintError("DMI: Null pointer passed in to riverwareToHdbDate().\n");
      return ERROR;
    }

  /* Format the hdbDate to ensure it's in 'dd-mon-yyyy hh24:mi:ss' format */
  if (SqlFormatDate (hdbDate, hdbDate) != OK)
  {
     PrintError("Error formatting hdb date (%s).\n", hdbDate);
     return ERROR;
  }
  
  return OK;
}

/********************************************************************/
#define FUNC_NAME "hdbToRiverWareDate"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> hdbToRiverWareDate

<P> <STRONG>Function signature:</STRONG> int hdbToRiverWareDate (SQL_DATE, char *, char *)

<P> <STRONG>Function description:</STRONG> Converts date in HDB format to Riverware format; e.g., dd-mm-yyyy -> yyyy-mm-dd.

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> SQL_DATE hdbDate: Date in HDB format (dd-mon-yyyy).
<BR><DD> char *riverwareDate:  Date in Riverware format (yyyy-mm-dd). Output.
<BR><DD> char *timestep:   Timestep represented by the date.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/

int hdbToRiverWareDate(SQL_DATE hdbDate, char *riverwareDate, char *timestep)
{
   int year, 
       month, 
       day,
       hour,
       minute = 0,   
       second = 0,
       result;

   char charMonth[3];

  if (riverwareDate != NULL && hdbDate != NULL) 
    {
       if (SqlExtractDatePart (hdbDate, MONTH, &month) != OK)
       {
	  PrintError("Error extracting month from (%s).\n", hdbDate);
	  riverwareDate[0] = '\0';
	  return ERROR;
       }

       /* Hourly -- add one hour */
      if (!strcmp (timestep, HOUR)) /* AND IF AVG DATA */
	{
	  if(sscanf(hdbDate, "%d-%3c-%d %d:%d:%d", &day, charMonth, &year,
		    &hour, &minute, &second) < 4) 
	    {
	      PrintError("DMI: Error interpreting hdb date (%s).\n", hdbDate);
	      riverwareDate[0] = '\0';
	      return ERROR;
	    }

	  sprintf(riverwareDate, "%04d-%02d-%02d %02d:%02d", year, month, day,
		  hour + 1, minute);
	}

      /* Daily -- hour = 24:00 */
      else if (!strcmp (timestep, DAY)) 
	{
	  if(sscanf(hdbDate, "%d-%3c-%d", &day, charMonth, &year) != 3) 
	    {
	      PrintError("DMI: Error interpreting hdb date (%s).\n", hdbDate);
	      riverwareDate[0] = '\0';
	      return ERROR;
	    }
	  
	  sprintf(riverwareDate, "%04d-%02d-%02d 24:00", year, month, day);
	}

      /* Month -- add 1 month, subtract 1 day, hour = 24:00.
	 ==> Last day of month. */
      else if (!strcmp (timestep, MONTH))
	{
	  if ((result = SqlDateMath (ADDITION, hdbDate, riverwareDate,
				     1, timestep)) != OK)
	    {
	      PrintError ("DMI: Problem adding 1 month to %s.\n\tExiting.",
			  hdbDate);
	      riverwareDate[0] = '\0';
	      return (ERROR);
	    }

	  if ((result = SqlDateMath (SUBTRACTION, riverwareDate, riverwareDate,
				     1, DAY)) != OK)
	    {
	      PrintError ("DMI: Problem subtracting 1 day from %s.\n\tExiting.",
			  hdbDate);
	      riverwareDate[0] = '\0';
	      return (ERROR);
	    }
	    
	  /* Convert date back to numeric */
	  if ((result = DmiCharToNumericDate (riverwareDate, riverwareDate)) != OK)
	    {
	      PrintError("DMI: Error converting %s to numeric format.\n", 
			 riverwareDate);
	      riverwareDate[0] = '\0';
	      return ERROR;
	    }

	  if(sscanf(riverwareDate, "%d-%d-%d", &day, &month, &year) != 3) 
	    {
	      PrintError("DMI: Error interpreting RiverWare date (%s).\n", 
			 riverwareDate);
	      riverwareDate[0] = '\0';
	      return ERROR;
	    }

	  sprintf(riverwareDate, "%04d-%02d-%02d 24:00", year, month, day);
	}

      /* Unknown timestep */
      else
	{
	  PrintError ("DMI: Timestep %s cannot be processed by hdbToRiverWareDate.\n\tExiting.", timestep);
	  riverwareDate[0] = '\0';
	  return (ERROR);
	}
    }
  else 
    {
      PrintError("DMI: Null pointer passed in to hdbToRiverWareDate().\n");
      return ERROR;
    }
   
   return OK;
   
 }

/****************************************************************************/
#define FUNC_NAME "DmiCharToNumericDate"
/*
<HTML>

<P> <STRONG>Function name:</STRONG> DmiCharToNumericDate

<P> <STRONG>Function signature:</STRONG> int DmiCharToNumericDate (char *, char *)

<P> <STRONG>Function description:</STRONG> Converts a character-based Oracle date to pure numeric format; e.g., '10-dec-1995 12:00:00' to '10/12/1995 12:00:00'

<P><DL> <STRONG>Function arguments:</STRONG>
<BR><DD> char *char_date:    Character date. MUST be in format dd-mon-yyyy hh24:mi:ss
<BR><DD> char *numeric_date: Resulting numeric date.
</DL>

<P> <STRONG>Function return value:</STRONG> OK or ERROR

</HTML>
*/
int DmiCharToNumericDate(char * char_date, char * numeric_date)
{
  EXEC SQL BEGIN DECLARE SECTION;
    int        month,
               day,
               year;
    char       *isTime,
               *time;
  EXEC SQL END DECLARE SECTION;

    if (SqlExtractDatePart(char_date, DAY, &day) != OK) {
        PrintError("DMI: Error getting day from date in DmiCharToNumericDate.\n");
        EXEC SQL AT :current_dbsite ROLLBACK;
        return (ERROR);
    }

    if (SqlExtractDatePart(char_date, MONTH, &month) != OK) {
        PrintError("DMI: Error getting month from date in DmiCharToNumericDate.\n");
        EXEC SQL AT :current_dbsite ROLLBACK;
        return (ERROR);
    }

    if (SqlExtractDatePart(char_date, YEAR, &year) != OK) {
        PrintError("DMI: Error getting year from date in DmiCharToNumericDate.\n");
        EXEC SQL AT :current_dbsite ROLLBACK;
        return (ERROR);
    }

  /* There must be a time portion to the input date. So, look for a ":" 
     in order to find hour, minute, second. */
  isTime = strstr (char_date, ":");
  if (isTime)
    {
      time = &(char_date[strlen(char_date) - strlen(isTime) - 2]);
      if ((strlen (time) < 8) || 
	  ((strlen (time) > 8) && (strcspn (time, " ") != 8)))
      {
	 PrintError ("Time portion of date (%s) is incorrect; must be hh24:mi:ss. Exiting.\n", time);
	 return (ERROR);
      }
      /* Create dd-mm-yyyy portion, as you know you have everything you need */
      sprintf(numeric_date, "%02d-%02d-%04d", day, month, year);

      time[8] = '\0';
      strcat (numeric_date, " ");
      strcat (numeric_date, time);
    }
  else
  {
     PrintError ("Date is missing time portion; must be hh24:mi:ss. Exiting.\n", time);
     return (ERROR);
  }
  
  return (OK);
}

/*****************************************************************************/
#define FUNC_NAME       "DmiFastDateCompare"

/* int DmiFastDateCompare(SQL_DATE firstDate,
                                    SQL_DATE secondDate,
                                    int *compareResult) */

/* Use SqlDateCompare in hdbLib in place of this!! */


/*****************************************************************************/
#define FUNC_NAME	"DmiNumIntervalsBetweenDates"

/* int DmiNumIntervalsBetweenDates(char *sDate, char *eDate, 
				char *interval, int *numIntervals) */

/* Use SqlNumIntervalsBetweenDates in place of this function */
