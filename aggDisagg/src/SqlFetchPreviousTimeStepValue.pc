/*****************************************************************************
* DESCRIPTION
*
* This file contains a functions that looks up the previous value in a table
* given a date type and a time step.
*
*
*
* Author
*
* Julien Chastang
* March, 1999
* Modified March, 2004 to allow for real source data
****************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "aggDisagg.h"
#include "aggDisaggDefines.h"
#include "utils.h"
#include "dbutils.h"
#include "defines.h"
#include "typedefs.h"
#include "aggDisaggTypedefs.h"
#include "lc_apps.h"

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "SqlFetchPreviousTimeStepValue"

int SqlFetchPreviousTimeStepValue (OBJECTTYPE_NAME tableSource, 
				   TIME_INTERVAL_TYPES obsSource, 
				   ID siteDatatypeId, SQL_DATE dateLow, 
				   double *previous_timestep_value, 
				   int sourceIsRange, int sourceIsReal,
				   int model_run_id_src)
{
     EXEC SQL BEGIN DECLARE SECTION;
         int result;
         int success;
         float return_val = 0;
         short return_ind = 0;
         char sql_statement[600];
         SQL_DATE start_date;
     EXEC SQL END DECLARE SECTION;

     char dateColName[32];
     char tempDateColName[32];

     /* Set date column based on source interval; if this is not range
	data, must prepend "start_" to the tempDateColName. */
     if ((result = GetDateColumn (obsSource, FALSE, sourceIsRange, tempDateColName)) != OK)
       {
	 PrintError ("Error in %s....\n", FUNC_NAME);
	 return (ERROR);
       }

     if (!sourceIsRange)
       sprintf (dateColName, "start_%s", tempDateColName);
     else
       strcpy (dateColName, tempDateColName);

     success = SqlDateMath(SUBTRACTION,dateLow,start_date,1,MONTH);

     if (success == ERROR)
     {
         PrintError("Problem doing date math. Exiting.\n");
         exit(ERROR);
     }

     if (sourceIsReal)
       sprintf(sql_statement,"SELECT value from %s WHERE site_datatype_id = %d and %s = to_date('%s','dd-mon-yyyy hh24:mi:ss')", tableSource, siteDatatypeId, dateColName, start_date); 
     else
       sprintf(sql_statement,"SELECT value from %s WHERE site_datatype_id = %d and model_run_id = %d AND %s = to_date('%s','dd-mon-yyyy hh24:mi:ss')", tableSource, siteDatatypeId, model_run_id_src, dateColName, start_date); 

    EXEC SQL AT :current_dbsite DECLARE sel STATEMENT;

    EXEC SQL PREPARE sel FROM :sql_statement;

    if (SqlErrorHandler (FUNC_NAME, TRUE, "Problem preparing sel from statement: \n\t%s.\n", sql_statement) != OK)
    {
           return(ERROR);
    }

    EXEC SQL DECLARE c1 CURSOR FOR sel;
    if ((result = SqlErrorHandler (FUNC_NAME, FALSE, "Error declaring cursor c1 for sel.\n\t%s.\n", sql_statement)) == ERROR)
    {
       return (ERROR);
    }

    EXEC SQL OPEN c1;
    if ((result = SqlErrorHandler (FUNC_NAME, FALSE, "Error opening cursor c1.\n", sql_statement)) == ERROR)
    {
       return (ERROR);
    }


    EXEC SQL FETCH c1 into :return_val:return_ind;
    if ((result = SqlErrorHandler (FUNC_NAME, TRUE, "Problem selecting the value.\n")) == ERROR)
    {
       return (ERROR);
    }

    EXEC SQL CLOSE c1;

    *previous_timestep_value = return_val;
    return (OK);
}
