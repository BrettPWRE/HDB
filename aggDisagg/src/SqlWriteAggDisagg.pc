/*****************************************************************************
* DESCRIPTION
*
* This file contains the functions which load the aggregated/disaggregated
* data into the database.
*
***************************************
*
* SqlWriteRealAggDisagg
*
* Purpose: insert/update real data values in database
* 
* Input
*      RUN_CONTROL    -- structure holding info to drive application
*      ID             -- site datatype ID of data to be written
*      VALUE_RECORD*  -- array of values to be written
*      int            -- number of values
*
* Output
*
* Return
* 	int - OK or ERROR
*
* Carol Marra
* April, 1996
****************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "aggDisagg.h"
#include "aggDisaggDefines.h"
#include "utils.h"
#include "dbutils.h"
#include "defines.h"
#include "typedefs.h"
#include "aggDisaggTypedefs.h"

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "SqlWriteRealAggDisagg"

int SqlWriteRealAggDisagg (RUN_CONTROL runControl, ID siteDatatypeId,
			   VALUE_RECORD *disAggValueList, int numDisAggValues)

{
  EXEC SQL BEGIN DECLARE SECTION;
   SQL_DATE      date1;
   SQL_DATE      date2;
    int           index1;
    int           index2;
    double        value;
    char          insertStatement[1000];
    char          updateStatement[1000];
    char          tempValidationFlag[2];
    varchar       validationFlag[2];
    varchar       overwriteFlag[2];
    short         overwriteInd;
    ID            sdi,
                  agencyId,
        	  collectionSystemId,
		  loadingApplicationId,
		  methodId, 
		  computationId;
   varchar        interval[SQL_INTERVAL_LENGTH];
  EXEC SQL END DECLARE SECTION;

  int         valueCount,
              result;
  char        dateColumn[30],
              valuesStatement[200],
              whereStatement[200];

  /* Get the validation flag for this site/datatype */
  if ((result = SqlGetValidationFlag (sdi, tempValidationFlag)) != OK)
    {
      return (ERROR);
    }

  /* Handle values that are written to r_base by calling stored procedure;
     don't need to construct insert and update statements */
  if (!runControl.isStat && !runControl.destIsRange)
  {
     for (valueCount = 0; valueCount < numDisAggValues; valueCount++)
     {
	/* Write needed data to host variables */
	sdi = siteDatatypeId;
	strcpy (interval.arr, runControl.interval); 
	interval.len = strlen (interval.arr);
	interval.arr[interval.len] = '\0';
	strcpy (date1, disAggValueList[valueCount].dateStart);
	strcpy (date2, disAggValueList[valueCount].dateEnd);
	value = disAggValueList[valueCount].value;
	strcpy (overwriteFlag.arr, runControl.overwriteFlag); 
	overwriteFlag.len = strlen (overwriteFlag.arr);
	overwriteFlag.arr[overwriteFlag.len] = '\0';
	if (overwriteFlag.len < 1) 
	  overwriteInd = -1;
	else
	  overwriteInd = 0;
	agencyId = runControl.agencyId;
	collectionSystemId = runControl.collectionSystemId;
	loadingApplicationId = runControl.loadingApplicationId;
	methodId = runControl.methodId;
	computationId = runControl.computationId;
	strcpy (validationFlag.arr, tempValidationFlag); 
	validationFlag.len = strlen (validationFlag.arr);
	validationFlag.arr[validationFlag.len] = '\0';

       EXEC SQL EXECUTE
        BEGIN
	  modify_r_base_raw (:sdi, 
			     :interval,
			      :date1,:date2,
			      :value, :agencyId, 
			      :overwriteFlag:overwriteInd,
			      :validationFlag,
			      :collectionSystemId, :loadingApplicationId, 
			      :methodId, :computationId, 'Y'); 
        END;
       END-EXEC;

       if ((result = SqlErrorHandler 
	    (FUNC_NAME, FALSE,
	     "Problem in modify_r_base_raw.")) != OK)
       {
	  EXEC SQL ROLLBACK;
	  return (ERROR);
       }

     }
   
     /* Done with inserts/updates to r_base for this site_datatype_id;
	no need to proceed */
     EXEC SQL COMMIT;
     return (OK);
  }

  /* Now process values that go somewhere other than r_base */

  /* Set date column based on destination interval. */
  if ((result = GetDateColumn (runControl.obsDest, runControl.isStat,
			       runControl.destIsRange, dateColumn)) != OK)
    {
      PrintError ("%s: Exiting.\n", FUNC_NAME);
      return (ERROR);
    }

  if (!runControl.destIsRange)
    {
      if (runControl.isStat)
      {
	sprintf (valuesStatement, 
		 "VALUES (%d, :a, :b, %d)",
		 siteDatatypeId, runControl.modelOrSourceId);
	sprintf (whereStatement, "%s = :d", dateColumn);
      }
    }
  else
    {
      if (runControl.isStat)
      {
	 sprintf (valuesStatement, 
		  "VALUES (%d, :a, :b, :c, %d)",
		  siteDatatypeId, runControl.modelOrSourceId);
	 sprintf (whereStatement, 
		  "start_%s = :s AND end_%s = :e", dateColumn, dateColumn);
      }
      else
      {
	 sprintf (valuesStatement, 
		  "VALUES (%d, to_date (:a, 'dd-mon-yyyy hh24:mi:ss'), to_date (:b, 'dd-mon-yyyy hh24:mi:ss'), :c, %d)",
		  siteDatatypeId, runControl.modelOrSourceId);
	 sprintf (whereStatement, 
		  "start_%s = to_date (:s, 'dd-mon-yyyy hh24:mi:ss') AND end_%s = to_date (:e, 'dd-mon-yyyy hh24:mi:ss')", dateColumn, dateColumn);
      }
    }

  sprintf (insertStatement, "INSERT INTO %s %s", runControl.tableDest, 
	   valuesStatement);

  if (!runControl.isStat)
  {
     if (runControl.destIsRange)
	sprintf (updateStatement, "UPDATE %s SET value = :v, source_id = %d WHERE site_datatype_id = %d AND %s", runControl.tableDest, 
		 runControl.modelOrSourceId, siteDatatypeId, whereStatement);
  }
  else
    sprintf (updateStatement, "UPDATE %s SET value = :v, source_id = %d WHERE site_datatype_id = %d AND %s", runControl.tableDest, runControl.modelOrSourceId,
	     siteDatatypeId, whereStatement);
 
#ifdef DEBUG     
 fprintf (stdout, "Insert stmt: %s\n", insertStatement);
 fprintf (stdout, "Update stmt: %s\n", updateStatement);
#endif
 
 EXEC SQL PREPARE insert_vals FROM :insertStatement;
 if ((result = SqlErrorHandler 
      (FUNC_NAME, FALSE,
       "Problem preparing insert statement:\n\t%s",
       insertStatement)) != OK)
   {
     EXEC SQL ROLLBACK;
     return (ERROR);
   }
 
 EXEC SQL PREPARE update_vals FROM :updateStatement;
 if ((result = SqlErrorHandler 
      (FUNC_NAME, FALSE,
       "Problem preparing update statement:\n\t%s",
       updateStatement)) != OK)
   {
     EXEC SQL ROLLBACK;
     return (ERROR);
   }
 
 for (valueCount = 0; valueCount < numDisAggValues; valueCount++)
   {
     value = disAggValueList[valueCount].value;

     /* Try first to update an appropriate record */
     if (!runControl.destIsRange)
       {
	 if (runControl.isStat)
	   {
	     index1 = disAggValueList[valueCount].timeIndexStart;
	     EXEC SQL EXECUTE update_vals
	       USING :value, :index1;
	   }
       }
     else
	/* never find this case currently; all range-only tables are m_;
	 would need to change the update statement if this did occur;
	 current one won't work */
	 if (!runControl.isStat)
	   {
	     strcpy (date1, disAggValueList[valueCount].dateStart);
	     strcpy (date2, disAggValueList[valueCount].dateEnd);
	     EXEC SQL EXECUTE update_vals
	       USING :value, :date1, :date2;
	   }
	 else
	   {
	     index1 = disAggValueList[valueCount].timeIndexStart;
	     index2 = disAggValueList[valueCount].timeIndexEnd;
	     EXEC SQL EXECUTE update_vals
	       USING :value, :index1, :index2;
	   }
       
     /* If no rows processed, insert row */
     if (sqlca.sqlcode > 0)
       {
	 if (!runControl.destIsRange)
	   {
	     if (runControl.isStat)
	       EXEC SQL EXECUTE insert_vals USING :index1, :value;
	   }
	 else
	   {
	     if (!runControl.isStat)
	       EXEC SQL EXECUTE insert_vals USING :date1, :date2, :value;
	     else
	       EXEC SQL EXECUTE insert_vals USING :index1, :index2, :value;
	   }

	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem inserting value for SDI: %d, record: %d into %s.\n\tExiting.", 
	       siteDatatypeId, valueCount, runControl.tableDest)) != OK)
	   {
	     EXEC SQL ROLLBACK;
	     return (ERROR);
	   }
       }

     /* Make sure no error on update */
     else
       {
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem updating value for SDI: %d, record: %d into %s.\n\tExiting.", sdi, valueCount, runControl.tableDest)) != OK)
	   {
	     EXEC SQL ROLLBACK;
	     return (ERROR);
	   }
       }
   }
 
  EXEC SQL COMMIT;	
  return (OK);
}

/***************************************************************************/
#define FUNC_NAME "SqlWriteModelAggDisagg"

int SqlWriteModelAggDisagg (RUN_CONTROL runControl, ID siteDatatypeId,
			    VALUE_RECORD *disAggValueList, int numDisAggValues)

{
  EXEC SQL BEGIN DECLARE SECTION;
    SQL_DATE      date1;
    SQL_DATE      date2;
    int           index1;
    int           index2;
    double        value;
    char          insertStatement[1000];
    char          updateStatement[1000];
    ID            sdi,
                  modelRunId;
    varchar       interval[SQL_INTERVAL_LENGTH];
 EXEC SQL END DECLARE SECTION;

  int         valueCount,
              result;
  char        dateColumn[30],
              valuesStatement[200],
              whereStatement[200];

  /* Handle values that are written to m_ interval tables (not range
     or statistics) by calling stored procedure;
     don't need to construct insert and update statements */
  if (!runControl.isStat && !runControl.destIsRange)
  {
     for (valueCount = 0; valueCount < numDisAggValues; valueCount++)
     {
	/* Write needed data to host variables */
	sdi = siteDatatypeId;
	modelRunId = runControl.modelOrSourceId;
	strcpy (interval.arr, runControl.interval);
	interval.len = strlen (interval.arr);
	interval.arr[interval.len] = '\0';
	strcpy (date1, disAggValueList[valueCount].dateStart);
	strcpy (date2, disAggValueList[valueCount].dateEnd);
	value = disAggValueList[valueCount].value;

       EXEC SQL EXECUTE
        BEGIN
	  modify_m_table_raw (:modelRunId, :sdi, 
			      :date1, :date2, :value, :interval, 'Y');
        END;
       END-EXEC;

       if ((result = SqlErrorHandler 
	    (FUNC_NAME, FALSE,
	     "Problem in modify_m_table_raw.")) != OK)
       {
	  EXEC SQL ROLLBACK;
	  return (ERROR);
       }

     }
   
     /* Done with inserts/updates to m_ interval tables for this 
	site_datatype_id; no need to proceed */
     EXEC SQL COMMIT;
     return (OK);
  }

  /* Now process values that go into m_ stat or range tables */

  /* Set date column based on destination interval. */
  if ((result = GetDateColumn (runControl.obsDest, runControl.isStat,
			       runControl.destIsRange, dateColumn)) != OK)
    {
      PrintError ("%s: Exiting.\n", FUNC_NAME);
      return (ERROR);
    }

  if (!runControl.destIsRange)
    {
      if (runControl.isStat)
      {
	 sprintf (valuesStatement, 
		  "VALUES (%d, %d, :a, :b)",
		  runControl.modelOrSourceId, siteDatatypeId);
	 sprintf (whereStatement, "%s = :d", dateColumn);
      }
    }
  else
    {
      if (runControl.isStat)
      {
	 sprintf (valuesStatement, 
		  "VALUES (%d, %d, :a, :b, :c)",
		  runControl.modelOrSourceId, siteDatatypeId);
	 sprintf (whereStatement, 
		  "start_%s = :s AND end_%s = :e", dateColumn, dateColumn);
      }
      else
      {
	 sprintf (valuesStatement, 
		  "VALUES (%d, %d, to_date (:a, 'dd-mon-yyyy hh24:mi:ss'), to_date (:b, 'dd-mon-yyyy hh24:mi:ss'), :c)",
		  runControl.modelOrSourceId, siteDatatypeId);
	 sprintf (whereStatement, 
		  "start_%s = to_date (:s, 'dd-mon-yyyy hh24:mi:ss') AND end_%s = to_date (:e, 'dd-mon-yyyy hh24:mi:ss')", dateColumn, dateColumn);
      }
    }

  sprintf (insertStatement, "INSERT INTO %s %s", runControl.tableDest, 
	   valuesStatement);

  sprintf (updateStatement, "UPDATE %s SET value = :v WHERE model_run_id = %d AND site_datatype_id = %d AND %s", runControl.tableDest,
	   runControl.modelOrSourceId, siteDatatypeId, whereStatement);
 
#ifdef DEBUG     
 fprintf (stdout, "Insert stmt: %s\n", insertStatement);
 fprintf (stdout, "Update stmt: %s\n", updateStatement);
#endif
 
 EXEC SQL PREPARE insert_vals FROM :insertStatement;
 if ((result = SqlErrorHandler 
      (FUNC_NAME, FALSE,
       "Problem preparing insert statement:\n\t%s",
       insertStatement)) != OK)
   {
     EXEC SQL ROLLBACK;
     return (ERROR);
   }
 
 EXEC SQL PREPARE update_vals FROM :updateStatement;
 if ((result = SqlErrorHandler 
      (FUNC_NAME, FALSE,
       "Problem preparing update statement:\n\t%s",
       updateStatement)) != OK)
   {
     EXEC SQL ROLLBACK;
     return (ERROR);
   }
 
 for (valueCount = 0; valueCount < numDisAggValues; valueCount++)
   {
     value = disAggValueList[valueCount].value;

     /* Try first to update an appropriate record */
     if (!runControl.destIsRange)
       {
	  if (runControl.isStat)
	  {
	     index1 = disAggValueList[valueCount].timeIndexStart;
	     EXEC SQL EXECUTE update_vals
		USING :value, :index1;
	  }
       }
     else
     {
	if (!runControl.isStat)
	{
	   strcpy (date1, disAggValueList[valueCount].dateStart);
	   strcpy (date2, disAggValueList[valueCount].dateEnd);
	   EXEC SQL EXECUTE update_vals
	      USING :value, :date1, :date2;
	}
	else
	  {
	     index1 = disAggValueList[valueCount].timeIndexStart;
	     index2 = disAggValueList[valueCount].timeIndexEnd;
	     EXEC SQL EXECUTE update_vals
		USING :value, :index1, :index2;
	  }
     }
       
     /* If no rows processed, insert row */
     if (sqlca.sqlcode > 0)
       {
	 if (!runControl.destIsRange)
	 {
	    if (runControl.isStat)	
	       EXEC SQL EXECUTE insert_vals USING :index1, :value;
	 }
	 else
	 {
	    if (!runControl.isStat)	
	       EXEC SQL EXECUTE insert_vals USING :date1, :date2, :value;
	    else
	       EXEC SQL EXECUTE insert_vals USING :index1, :index2, :value;
	 }

     
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem inserting value for SDI: %d, record: %d into %s.\n\tExiting.", 
	       siteDatatypeId, valueCount, runControl.tableDest)) != OK)
	   {
	     EXEC SQL ROLLBACK;
	     return (ERROR);
	   }
       }

     /* Make sure no error on update */
     else
       {
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE,
	       "Problem updating value for SDI: %d, record: %d into %s.\n\tExiting.", sdi, valueCount, runControl.tableDest)) != OK)
	   {
	     EXEC SQL ROLLBACK;
	     return (ERROR);
	   }
       }
   }
 
  EXEC SQL COMMIT;	
  return (OK);
}
