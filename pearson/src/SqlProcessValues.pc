#include <stdio.h>
#include <string.h>
#include "dbutils.h"
#include "typedefs.h"
#include "utils.h"
#include "defines.h"

#define VERSION "1.1"

EXEC SQL INCLUDE SQLCA;

#define FUNC_NAME "SqlProcessDailyValues"
int SqlProcessDailyValues (SQL_DATE bdate, SQL_DATE edate, SQL_DATE  bdate_aj,
			   SQL_DATE edate_aj, ID site_datatype_id, 
			   ID model_run_id, char *site_name, 
			   char *datatype_name, char *unit_name, 
			   char *model_run_name, int num_years, int beg_year)
			
{	
   EXEC SQL BEGIN DECLARE SECTION;
     SQL_DATE sq_bdate,
	      sq_edate,
	      sq_bdate_aj,
	      sq_edate_aj;
     ID sq_site_datatype_id,
	sq_model_run_id;
   EXEC SQL END DECLARE SECTION;

   float         summer;
   float         total[2000],
                 total_aj[2000],
                 peak[2000];
   char          yr[5];

   int           num,
                 result,
                 j,
                 offset;


   /* Initialize host variables */
   strcpy (sq_bdate, bdate);
   strcpy (sq_edate, edate);
   strcpy (sq_bdate_aj, bdate_aj);
   strcpy (sq_edate_aj, edate_aj);
   sq_site_datatype_id = site_datatype_id;
   sq_model_run_id = model_run_id;

   /* If real data */
   if (model_run_id == 0)
   {
      /* For every year, get aggregate data */
      for (j = 0; j < num_years; j++)
      {
	 /* find the number of days between the two dates */
	 SqlNumDaysBetweenDates(sq_bdate,sq_edate,&offset);
	 
	 EXEC SQL SELECT COUNT(*) 
	    INTO :num 
	    FROM R_DAY A
	    WHERE site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate and :sq_edate;
	 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, TRUE, "Problem selecting count from r_day.\n")) 
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }
	 if (num < offset)
	 {
	    PrintError("\nThe period specified is water year %d through %d\n\tHowever, there is not a continious set of data in the database for this period\n",
		       beg_year, beg_year + num_years - 1);
	    strncpy(yr,&sq_edate[7],4);
	    yr[4]='\0';
	    PrintError("Water year %s  does not have a full set of daily data\n\tExiting!\n\n",yr);
	    return (ERROR);
	 }
	 
	 /* Get sum of values for entire water year */
	 EXEC SQL SELECT SUM(value) 
	    INTO :summer 
	    FROM R_DAY A
	    WHERE site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate and :sq_edate;
	 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem selecting sum from r_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 /* Convert value to AF */
	 total[j] = summer * 1.98347;
	 
	 /*now get the apr_jul volume */
	 EXEC SQL SELECT SUM(value) 
	    INTO :summer 
	    FROM R_DAY A
	    WHERE site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate_aj and :sq_edate_aj;

	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem selecting apr-jul volume from r_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 /* Convert value to AF */
	 total_aj[j] = summer * 1.98347;
	 
	 /* now get the peak */
	 EXEC SQL SELECT MAX(value) 
	    INTO :summer 
	    FROM R_DAY A
	    WHERE site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate and :sq_edate;
	 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem selecting peak from r_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 EXEC SQL COMMIT;
	 
	 peak[j] = summer;

	 /* increase the dates to process next year*/
	 SqlDateMath(ADDITION,sq_bdate,sq_bdate,1,YEAR);      
	 SqlDateMath(ADDITION,sq_edate,sq_edate,1,YEAR);      
	 
	 SqlDateMath(ADDITION,sq_bdate_aj,sq_bdate_aj,1,YEAR);      
	 SqlDateMath(ADDITION,sq_edate_aj,sq_edate_aj,1,YEAR);      
      }
   }
   
   /* else model data */
   else
   {
      /* For every year, get aggregate data */
      for (j = 0; j < num_years; j++)
      {
	 /* find the number of days between the two dates */
	 SqlNumDaysBetweenDates(sq_bdate,sq_edate,&offset);
	 
	 EXEC SQL SELECT COUNT(*) 
	    INTO :num 
	    FROM M_DAY A
	    WHERE model_run_id = :sq_model_run_id
	    AND site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate and :sq_edate;
	 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, TRUE, "Problem selecting count from m_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 if (num < offset)
	 {
	    PrintError("\nThe period specified is water year %d through %d\n\tHowever, there is not a continious set of data in the database for this period\n",
		       beg_year, beg_year + num_years - 1);
	    strncpy(yr,&sq_edate[7],4);
	    yr[4]='\0';
	    PrintError("Water year %s  does not have a full set of daily data\n\tExiting!\n\n",yr);
	    return (ERROR);
	 }
	 
	 /* Get sum of values for entire water year */
	 EXEC SQL SELECT SUM(value) 
	    INTO :summer 
	    FROM M_DAY A
	    WHERE model_run_id = :sq_model_run_id
	    AND site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate and :sq_edate;
	 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem selecting sum from m_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 /* Convert value to AF */
	 total[j] = summer * 1.98347;
	 
	 /*now get the apr_jul volume */
	 EXEC SQL SELECT SUM(value) 
	    INTO :summer 
	    FROM M_DAY A
	    WHERE model_run_id = :sq_model_run_id
	    AND site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate_aj and :sq_edate_aj;

	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem selecting apr-jul volume from m_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 /* Convert value to AF */
	 total_aj[j] = summer * 1.98347;
	 
	 /* now get the peak */
	 EXEC SQL SELECT MAX(value) 
	    INTO :summer 
	    FROM M_DAY A
	    WHERE model_run_id = :sq_model_run_id
	    AND site_datatype_id = :sq_site_datatype_id
	    AND start_date_time BETWEEN :sq_bdate and :sq_edate;
	 
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem selecting peak from m_day\n"))
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 EXEC SQL COMMIT;
	 
	 peak[j] = summer;

	 /* increase the dates to process next year*/
	 SqlDateMath(ADDITION,sq_bdate,sq_bdate,1,YEAR);      
	 SqlDateMath(ADDITION,sq_edate,sq_edate,1,YEAR);      
	 
	 SqlDateMath(ADDITION,sq_bdate_aj,sq_bdate_aj,1,YEAR);      
	 SqlDateMath(ADDITION,sq_edate_aj,sq_edate_aj,1,YEAR);      
      }
   }

  /* write this stuff to standard output*/
  printf("                 %s\n",site_name);
  printf("                      %s\n", datatype_name);
  
  if(model_run_id == 0)
     printf("                   units are %s for the first column only\n",unit_name);
  else
     printf("  units are %s  model run name is %s\n",unit_name,model_run_name);
  
  for (j = 0; j < num_years; j++)
     printf("    %4d   %9.0f.  %9.0f.  %9.0f.   9999.   9999.   9999.   9999.   9999.   9999.   9999.   9999.   9999.\n",beg_year + j,peak[j],total[j],total_aj[j]);

  j=0;
  printf("    9999\n");

  return (OK);
}




#define FUNC_NAME "SqlProcessMonthlyValues"
int SqlProcessMonthlyValues (SQL_DATE bdate, SQL_DATE edate, 
			     ID site_datatype_id, 
			     ID model_run_id, char *site_name, 
			     char *datatype_name,
			     char *unit_name, char *model_run_name, 
			     int num_years, int beg_year)
{	
   EXEC SQL BEGIN DECLARE SECTION;
     SQL_DATE sq_bdate,
	      sq_edate;
     ID sq_site_datatype_id,
	sq_model_run_id;
     float        vals[2000];
     SQL_DATE     date_array[2000]; /* holds unused vals for ordering SELECT */
   EXEC SQL END DECLARE SECTION;

   int           num,
                 result,
                 j,
                 year;

   
   /* Initialize host variables */
   strcpy (sq_bdate, bdate);
   strcpy (sq_edate, edate);
   sq_site_datatype_id = site_datatype_id;
   sq_model_run_id = model_run_id;

  if (model_run_id == 0)
    {

      EXEC SQL SELECT COUNT(*) 
	 INTO :num 
	 FROM R_MONTH A
	 WHERE site_datatype_id = :sq_site_datatype_id
	      AND start_date_time BETWEEN :sq_bdate and :sq_edate;

      if ((result = SqlErrorHandler 
	   (FUNC_NAME, TRUE, "Problem selecting count from r_month.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }

      if (num != (num_years * 12))
	{
	    PrintError("\nThe period specified is water year %d through %d\n\tHowever, there is not a continious set of data in the database for this period.\n\tExiting!\n",
		       beg_year, beg_year + num_years - 1);
	    return (ERROR);
	 }
      
      EXEC SQL WHENEVER NOT FOUND goto close_aa;

      EXEC SQL DECLARE AA CURSOR FOR 
	 SELECT value,start_date_time 
	 FROM R_MONTH A
	 WHERE SITE_DATATYPE_ID = :sq_site_datatype_id
	 AND START_DATE_TIME BETWEEN :sq_bdate and :sq_edate
	 ORDER BY START_DATE_TIME;
      
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE, "Problem declaring cursor to select from r_month.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }

      EXEC SQL OPEN AA;
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE, "Problem opening cursor to select from r_month.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }

      j=0;
      while(1)
      {
	 EXEC SQL FETCH AA
	    INTO :vals[j],:date_array[j];
	 if ((result = SqlErrorHandler 
	      (FUNC_NAME, FALSE, "Problem fetching from r_month.\n")) 
	     != OK)
	 {
	    SqlDisconnect();
	    return (ERROR);
	 }

	 j++;
      }
      
    close_aa:
      EXEC SQL COMMIT;
      EXEC SQL CLOSE AA;
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE, "Problem closing cursor AA.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }
      
      EXEC SQL COMMIT;      
    }

  /* model data */
  else
    {
      EXEC SQL SELECT COUNT(*) 
	 INTO :num 
	 FROM M_MONTH A
	WHERE model_run_id = :sq_model_run_id
	 AND site_datatype_id = :sq_site_datatype_id
	 AND start_date_time BETWEEN :sq_bdate and :sq_edate;
      
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, TRUE, "Problem selecting count from m_month.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }

      if (num != (num_years * 12))
	{
	   PrintError("\nThe period specified is water year %d through %d\n\tHowever, there is not a continious set of data in the database for this period.\n\tExiting!\n",
		      beg_year, beg_year + num_years - 1);
	   return (ERROR);
	} 
      
      EXEC SQL WHENEVER NOT FOUND goto close_bb;

      EXEC SQL DECLARE BB CURSOR FOR 
	SELECT value,start_date_time 
	 FROM M_MONTH A
	  WHERE model_run_id = :sq_model_run_id
  	     AND site_datatype_id = :sq_site_datatype_id
      	     AND start_date_time BETWEEN :sq_bdate and :sq_edate
		    ORDER BY START_DATE_TIME;
      
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE, "Problem declaring cursor to select from m_month.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }

      EXEC SQL OPEN BB;
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, TRUE, "Problem opening cursor to select from m_month.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }
      
      j=0;
      while(sqlca.sqlcode == 0)
	{
	  EXEC SQL FETCH BB
	    INTO :vals[j],:date_array[j];
	  if ((result = SqlErrorHandler 
	       (FUNC_NAME, FALSE, "Problem fetching from m_month.\n")) 
	      != OK)
	  {
	     SqlDisconnect();
	     return (ERROR);
	  }

	  j++;
	}

    close_bb:
      EXEC SQL COMMIT;
      EXEC SQL CLOSE BB;
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE, "Problem closing cursor BB.\n")) 
	  != OK)
      {
	 SqlDisconnect();
	 return (ERROR);
      }

      EXEC SQL COMMIT;
    }
  
  /* write this stuff to standard output*/
  
  printf("                 %s\n",site_name);
  printf("                      %s\n", datatype_name);
  printf("                         units are %s",unit_name);
  
  j=0;
  year = beg_year;
  
  while (j < num_years * 12)
    {
      if((j % 12) == 0)
	printf("\n    %4d   ",year++);
      printf("%8.0f.",vals[j]);
      j++;
    }
  
  printf("\n    9999\n");
  
  return (OK);
}
  





