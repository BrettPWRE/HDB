
/****************************************************************************
**
**      IDENTIFICATION SECTION
**      ----------------------
**
**      Module Name:    int DmiSaveModelData(dmi_header_struct * header)
**
**      File Name:      DmiSaveModelData.pc
**
**      Date Written:   December, 1995
**
**      Author(s):      Paddy McCarthy
**                      Carol Marra (modified for Oracle 10/98)
**
**      Module Description:
**         Writes data for a single object/slot to the DB in appropriate 
**         model (m_) table.
**
**      Variables Passed In:
**         dmi_header_struct *list = pointer to struct containing obj/slot
**              info and data.
**
**      Comments:
**        This routine assumes that the following information has been
**          initialized in the passed-in header:
**          hdb_site_datatype_id -- the proper sdi for the obj/slot
**          data[] -- all elements
**          
**        The routine uses a circular array to manage the passed-in data.
**          I designed this assuming that the routine could compare two
**          ordered lists -- the data fetched from the DB is compared to
**          data passed in with the header. The DB list of data could
**          contain missing values, whereas the passed-in list will have
**          no gaps. With ordered lists, when a piece of data is fetched 
**          from the DB, there is no reason to search the passed-in list
**          BEFORE the date of the last successful comparison to find
**          the matching piece of data. So a circular array would be
**          very efficient and robust for two ordered lists.
**
**        Unfortunately, Ingres does not allow one to open a cursor FOR UPDATE
**          that is ordered. So the ordered nature of one of the lists is not 
**          guaranteed. I kept the circular array b/c the DB records are mostly
**          ordered due to the nature in which they are inserted. This cuts 
**          down on the n-squared nature of the algorithm.
**          
**
*****************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <utils.h>
#include <dbutils.h>
#include <defines.h>
#include "dmiOut.h"
#include "typedefs.h"

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "DmiSaveModelData"
int DmiSaveModelData(dmi_header_struct * header)
{
    EXEC SQL BEGIN DECLARE SECTION;
       SQL_DATE      end_date;
       SQL_DATE      start_date;
       SQL_DATE      run_control_start_date,
	             run_control_end_date;
       SQL_INTERVAL  dataInterval;
       double        value;

       int           i, cnt;
       int           compare1, compare2;
       int           switched = FALSE;

       char          deleteRemaining[200],
              	     model_table_name[DATABASE_NAME_LENGTH];

       int           siteDatatypeId;
       int           modelRunId;
    EXEC SQL END DECLARE SECTION;

   int result;

   /* Determine interval */
    if (!strcmp (header->timestep, HOUR))
      {
	strcpy(dataInterval, "hour");
	sprintf (model_table_name, MODEL_HOUR);
      }
    else if (!strcmp (header->timestep, DAY))
      {
	strcpy(dataInterval, "day");
	sprintf (model_table_name, MODEL_DAY);
      }
    else if (!strcmp (header->timestep, MONTH))
      {
	strcpy(dataInterval, "month");
	sprintf (model_table_name, MODEL_MONTH);
      }
    else
      {
	PrintError ("Error in %s...timestep %s unknown...\n.", 
		    FUNC_NAME,header->timestep);
	return (ERROR);
      }
    
    /* Get the start and end dates from run control. No data outside these 
       dates will be saved to the DB.  */

    if (riverwareToHdbDate(header->pr_runcontrol_startdate, run_control_start_date,
	header->timestep) != 0) {
        PrintError("DMI: Unable to convert start date (%s) to HDB format when saving data.\n", 
                    header->pr_runcontrol_startdate);
        return (ERROR);
    }

    if (riverwareToHdbDate(header->pr_runcontrol_enddate, run_control_end_date,
	header->timestep) != 0) {
        PrintError("DMI: Unable to convert end date (%s) to HDB format when saving data.\n", 
                    header->pr_runcontrol_enddate);
        return (ERROR);
    }

  /* If the data are not to be written to the default database, 
     set the session accordingly */

  if (strcmp(header->data_location, dbsite_array[0].dbsite_alias))
  {
    cnt = 0;

    /* Search for the needed session in the array of sessions */

    while (cnt < number_of_db_sites) 
	{
	  if (!strcmp(dbsite_array[cnt].dbsite_alias, header->data_location))
	    break;
	  cnt++;
    }
      /* The appropriate member was found */

    if (cnt < number_of_db_sites) 
      { 
	/* Return if not connected to that session -- no way to save
	   the data */

	if (!dbsite_array[cnt].connected) 
	  {
	    PrintError("Not connected to session for %s. Cannot fetch data...\n",
		       dbsite_array[cnt].dbsite_alias);
	    
	    /* switch the session back to default. */
	    
	    if (SwitchSession(dbsite_array[0].dbsite_alias) != OK) 
	      {
		PrintError("Error...changing to session 1 for %s\n",
			   dbsite_array[0].dbsite_alias);
		return(ERROR);
	      }
	    
	    return(ERROR);
	  }
	else /* attempt to switch to the needed session */
	  {
	    if (SwitchSession(dbsite_array[cnt].dbsite_alias) != OK) 
	      {
		PrintError("ERROR occurred changing to session %d for %s\n",
			   dbsite_array[cnt].session_number,
			   dbsite_array[cnt].dbsite_alias);
		return(ERROR);
	      }
	    else  /* Switch was successful. */
	      {
		switched = TRUE;

	      }
	  }
      }
    
    /* The name is not in the array. Exit. */
    else 
      {
	PrintError("Could not find database session ID for %s.\n",
		   header->data_location);
	return(ERROR);
      }
  }

    EXEC SQL AT :current_dbsite COMMIT;
    result = SqlErrorHandler (FUNC_NAME, TRUE,
                              "Problem committing at %s.\n",
                              current_dbsite);
    if (result != OK)
    {
       PrintError("Error...committing at :current_dbsite\n");
       return(ERROR);
    }

    /* Create statement to delete any DB rows outside of model run dates */
    sprintf (deleteRemaining, "delete from %s where model_run_id = %d \
and site_datatype_id = %d and (start_date_time < to_date ('%s') OR \
start_date_time > to_date ('%s'))", model_table_name, 
	     model_run_id, header->hdb_site_datatype_id, 
	     run_control_start_date, run_control_end_date);
    
    for (i = 0; i < header->number_of_timesteps; i++) 
    { 
      modelRunId = model_run_id;
      siteDatatypeId = header->hdb_site_datatype_id;
      strcpy (start_date, header->data[i].hdb_date);
      strcpy (end_date, header->data[i].end_date);
      value = header->data[i].value;

      /* If header->data[i].hdb_date is between (inclusive)
	run_control_start_date and run_control_end_date, process the value;
	otherwise, print warning message and do not process value */
      result = SqlDateCompare(header->data[i].hdb_date,
				  run_control_start_date,
				  &compare1);
      if (result != OK) 
	{
	  PrintError("Could not compare dates %s and %s.\n",
		     run_control_start_date,
		     header->data[i].hdb_date);
	  return(ERROR);
	}
      
      result = SqlDateCompare(header->data[i].hdb_date,
				  run_control_end_date,
				  &compare2);
      if (result != OK) 
	{
	  PrintError("Could not compare dates %s and %s.\n",
		     run_control_end_date,
		     header->data[i].hdb_date);
	  return(ERROR);
	}

      /* If this item is between start and end dates of model run, 
	 process it */
      if ((compare1 >= 0) & (compare2 <= 0)) 
	{
	  /* Delete old value if new is NaN; execute the delete
	     at the current database*/ 
	  if (header->data[i].is_nan == 'Y')
	    {
	      EXEC SQL AT :current_dbsite EXECUTE
		BEGIN
		delete_m_table (:modelRunId, :siteDatatypeId,
				:start_date, :end_date, :dataInterval);
	      END;
	      END-EXEC;

	      if ((result = SqlErrorHandler 
		   (FUNC_NAME, FALSE,
		    "Problem in delete_m_table.")) != OK)
		{
		  EXEC SQL AT :current_dbsite ROLLBACK;
		  return (ERROR);
		}
	    }
	  /* update or insert the value */
	  else 
	    {
	      /* PrintError("Updating or inserting value.\n"); */

	      EXEC SQL AT :current_dbsite EXECUTE
		BEGIN
		modify_m_table_raw (:modelRunId, :siteDatatypeId,
				   :start_date, :end_date, :value,
	                           :dataInterval, 'Y'); 
	      END;
	      END-EXEC;

	      if ((result = SqlErrorHandler 
		   (FUNC_NAME, FALSE,
		    "Problem in modify_m_table_raw.")) != OK)
		{
		  EXEC SQL AT :current_dbsite ROLLBACK;
		  return (ERROR);
		}
	    }
	}

      else if (compare1 < 0)
	PrintError ("Data date %s is before run control start date\n\t %s. Value will be ignored.\n", header->data[i].hdb_date, run_control_start_date);
      else 
	PrintError ("Data date %s is after run control end date\n\t %s. Value will be ignored.\n", header->data[i].hdb_date, run_control_end_date);

    } /* end looping through values in header */

    /* Commit; stored procedure doesn't */
    EXEC SQL AT :current_dbsite COMMIT;
    if ((result = SqlErrorHandler (FUNC_NAME, TRUE,
       "Problem committing new values.\n")) != OK) {
       return(ERROR);
    }

    /* Take additional steps to ensure that data in database
       is equivalent to data in current model run:
       - If there is data in HDB for this model_run and SDI, but
         outside the model run date range, delete it. */
    EXEC SQL AT :current_dbsite EXECUTE IMMEDIATE :deleteRemaining;
    if ((result = SqlErrorHandler 
	 (FUNC_NAME, TRUE,
	  "Problem executing: %s.", deleteRemaining)) != OK)
      {	
	EXEC SQL AT :current_dbsite ROLLBACK;
	return (ERROR)	;
      }
    
    /* Post a warning that one or more rows were deleted with the 
       deleteRemaining statement. */
    if (sqlca.sqlcode == 0)
      PrintError("DMI: Removed values from database because they were outside the current run dates for this model run.\n");
    
    /* Commit; stored procedure doesn't */
    EXEC SQL AT :current_dbsite COMMIT;
    if ((result = SqlErrorHandler (FUNC_NAME, TRUE,
       "Problem committing delete of rows outside model run dates.\n")) != OK) {
       return(ERROR);
    }

  /* Set session back to default, if switch was made. */
  if (switched)
    {
      if (SwitchSession(dbsite_array[0].dbsite_alias) != OK) 
	{
	  PrintError("ERROR occurred changing to default session 1 for %s\n",
		     dbsite_array[0].dbsite_alias);
	  return(ERROR);
	}
    }

  return(OK);
}



#define FUNC_NAME "DmiDeleteObsoleteModelSDIs"

#define CHARS_PER_SDI 7
#define NUM_SDIS 10000
#define CHARS_PER_HEADER 100
int DmiDeleteObsoleteModelSDIs(dmi_header_struct * list)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char          *deleteStatement,
	          tempDeleteStatement[CHARS_PER_HEADER],
                  model_table_name[DATABASE_NAME_LENGTH];
    EXEC SQL END DECLARE SECTION;

    char tempStatement[CHARS_PER_SDI + 1];
    dmi_header_struct *current = list;

    int result,
      count;

   /* Proceed only if first element is written to model tables.
      DMIs currently (3/04) do not allow for some slots to be
      written to r_ tables and others to m_ tables. So, it's safe
      to exit if the first element goes to a real table. */
   if (current->destination == REAL)
     return (OK);

   /* Get model table */
   if (!strcmp (list->timestep, HOUR))
     sprintf (model_table_name, MODEL_HOUR);
   else if (!strcmp (list->timestep, DAY))
     sprintf (model_table_name, MODEL_DAY);
   else if (!strcmp (list->timestep, MONTH))
     sprintf (model_table_name, MODEL_MONTH);
   else
     {
       PrintError ("Error in %s...timestep %s unknown...\n.", 
		   FUNC_NAME,list->timestep);
       return (ERROR);
     }

   /* Malloc enough space for about 10000 site datatype IDs in the
      string */
   deleteStatement = malloc (CHARS_PER_HEADER + (NUM_SDIS * CHARS_PER_SDI));
   if (!deleteStatement)
     {
       PrintError ("DMI: Error allocating space for deleteStatement.\n\t");
       return (ERROR);
     }

   count = 0;

   /* Output model_run_id must be the same for all SDIs, so use
      the first one in the delete statement */
   sprintf (tempDeleteStatement, "delete from %s where model_run_id = %d and site_datatype_id not in (%d", model_table_name, model_run_id,
	    current->hdb_site_datatype_id);
   strcpy (deleteStatement, tempDeleteStatement);
   
   /* Walk through list to build up list of SDIs for delete statement */
   current = current->next;
   count++;

   while (current)
     {
       /* increase size of string if necessary */
       if (!(count % NUM_SDIS))
	 {
	   deleteStatement =  realloc (deleteStatement,
				       CHARS_PER_HEADER +  
				       ((count / NUM_SDIS + 1) * 
					(NUM_SDIS * CHARS_PER_SDI)));
	   
	   if (!deleteStatement)
	     {
	       PrintError ("DMI: Error allocating space for deleteStatement.\n\t");
	       return (ERROR);
	     }
	 }

       sprintf (tempStatement, ", %d", current->hdb_site_datatype_id);
       strcat (deleteStatement, tempStatement);
       current = current->next;
       count++;
     }
   
   strcat (deleteStatement, ")");

   EXEC SQL AT :current_dbsite EXECUTE IMMEDIATE :deleteStatement;

   if ((result = SqlErrorHandler (FUNC_NAME, TRUE,
				  "Error deleting obsolete site_datatype_ids from model run: \n\t %s\n", deleteStatement)) != OK)
     {
       EXEC SQL AT :current_dbsite ROLLBACK;
       return(ERROR);
     }

   if (sqlca.sqlcode == 0)
     PrintError ("Successfully deleted model data from the database for any \n\t site_datatype_ids that are no longer part of this model run.\n");

}
