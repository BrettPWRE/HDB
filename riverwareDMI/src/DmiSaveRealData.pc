/****************************************************************************
**
**      IDENTIFICATION SECTION
**      ----------------------
**
**      Module Name:    int DmiSaveRealData(dmi_header_struct * header)
**
**      File Name:      DmiSaveRealData.pc
**
**      Date Written:   Feb, 1999
**
**      Author(s):      Rene  Reitsma
**			Modified 2/04 to use data-loading stored procedures
**
**      Module Description:
**         Writes data for a single object/slot to the DB in appropriate 
**         real (r_) table. Code is the adjusted version of
**         DmiSaveModelData.pc
**
**      Variables Passed In:
**         dmi_header_struct *list = pointer to struct containing obj/slot
**              info and data.
**
**      Comments:
**        This routine assumes that the following information has been
**          initialized in the passed-in header:
**          hdb_site_datatype_id -- the proper sdi for the obj/slot
**          data[] -- all elements
**          
**        The routine uses a circular array to manage the passed-in data.
**          I designed this assuming that the routine could compare two
**          ordered lists -- the data fetched from the DB is compared to
**          data passed in with the header. The DB list of data could
**          contain missing values, whereas the passed-in list will have
**          no gaps. With ordered lists, when a piece of data is fetched 
**          from the DB, there is no reason to search the passed-in list
**          BEFORE the date of the last successful comparison to find
**          the matching piece of data. So a circular array would be
**          very efficient and robust for two ordered lists.
**
**        Unfortunately, Ingres does not allow one to open a cursor FOR UPDATE
**          that is ordered. So the ordered nature of one of the lists is not 
**          guaranteed. I kept the circular array b/c the DB records are mostly
**          ordered due to the nature in which they are inserted. This cuts 
**          down on the n-squared nature of the algorithm.
**          
**
*****************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <utils.h>
#include <dbutils.h>
#include <defines.h>
#include "dmiOut.h"
#include "typedefs.h"

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "DmiSaveRealData"
int DmiSaveRealData(dmi_header_struct * header)
{
    EXEC SQL BEGIN DECLARE SECTION;
       SQL_DATE      end_date;
       SQL_DATE      start_date;
       SQL_DATE      run_control_start_date;
       SQL_INTERVAL  dataInterval;
       double        value;

       int	     siteDatatypeId;
       int           agencyId;
       int           collectionId;
       int           computationId;
       int           i;
       int           loadingId;
       int           methodId;
       int           result;
       char          *overwrite;
    EXEC SQL END DECLARE SECTION;

    int the_result;

    /* Lookup foreign keys for insertions to r_base */
    if ((result = SqlGetMethodId("unknown", &methodId)) != OK)
    {
       PrintError("Problem looking up method id for method named unknown.");
       return (ERROR);
    }
    if ((result = SqlGetComputationId("unknown", &computationId)) != OK)
    {
       PrintError("Problem looking up computation id for computation named unknown.");
       return (ERROR);
    }
    if ((result = SqlGetCollectionId("RiverWare", &collectionId)) != OK)
    {
       PrintError("Problem looking up collection system id for RiverWare.");
       return (ERROR);
    }
    if ((result = SqlGetLoadingId("RiverWare DMI", &loadingId)) != OK)
    {
       PrintError("Problem looking up loading application id for RiverWare DMI.");
       return (ERROR);
    }
    if ((result = SqlGetAgencyId("Bureau of Reclamation", &agencyId)) != OK)
    {
       PrintError("Problem looking up agency id for Bureau of Reclamation.");
       return (ERROR);
    }

    /* Determine interval based on timestep */

    if (!strcmp (header->timestep, HOUR))
    {
          strcpy(dataInterval, "hour");
    }
    else if (!strcmp (header->timestep, DAY))
         {
                strcpy(dataInterval, "day");
         }
         else if (!strcmp (header->timestep, MONTH))
              {
                    strcpy(dataInterval, "month");
              }
              else
              {
	            PrintError ("Error in %s...timestep %s unknown...\n.", 
                            FUNC_NAME,header->timestep);
	            return (ERROR);
              }
    
    /* Get the start date from the run control. No data from before this 
       date will be saved to the DB or cause deletions from the DB.  */

    result = riverwareToHdbDate(header->pr_runcontrol_startdate, 
                            run_control_start_date,
	                        header->timestep);
    if (result != OK) 
    {
      PrintError("DMI: Unable to convert start date (%s) to HDB format when saving data.\n", 
                 header->pr_runcontrol_startdate);
      return (ERROR);
    }

  /* If the data do not belong to the default database, exit with an 
     error; cannot write real data back to non-default database */

  if (strcmp(header->data_location, dbsite_array[0].dbsite_alias))
  {
    PrintError ("You cannot write real/historical data back to the non-local database.\n");
    PrintError ("Object = %s, database = %s\n", header->object_name, 
	header->data_location);
    return (ERROR);
  }

  /* ORACLE -- can't set Autocommit Off. Need to do other DB operations 
     while cursor is open. Commit to set new transaction. */

  /* needed??? */
  EXEC SQL AT :current_dbsite COMMIT;
  result = SqlErrorHandler (FUNC_NAME, TRUE,
                              "Problem committing at %s.\n",
                              current_dbsite);
  if (result != OK)
    {
       PrintError("Error...committing at :current_dbsite\n");
       return(ERROR);
    }

    for (i = 0; i < header->number_of_timesteps; i++) 
    { 
      /* Set host variables */
      siteDatatypeId = header->hdb_site_datatype_id;
      strcpy (start_date, header->data[i].hdb_date);
      strcpy (end_date, header->data[i].end_date);
      value = header->data[i].value;

      /* If header->data[i].hdb_date equal to or greater than 
	run_control_start_date, process the value; otherwise, do nothing */
      the_result = SqlDateCompare(header->data[i].hdb_date,
				  run_control_start_date,
				  &result);
      if (the_result != OK) 
	{
	  PrintError("Could not compare dates %s and %s.\n",
		     run_control_start_date,
		     header->data[i].hdb_date);
	  return(ERROR);
	}
      
      /* If this item is not before start date of model run, process it */
      if (result >= 0) 
	{
	  /* Delete old value if new is NaN */
	  if (header->data[i].is_nan == 'Y')
	    {
	      EXEC SQL AT :current_dbsite EXECUTE
		BEGIN
		delete_r_base (:siteDatatypeId,
			       :dataInterval, :start_date, :end_date,
			       :agencyId, :loadingId);
	      END;
	      END-EXEC;
	      
	      if ((result = SqlErrorHandler 
		   (FUNC_NAME, TRUE,
		    "Problem in delete_r_base.")) != OK)
		{
		  EXEC SQL AT :current_dbsite ROLLBACK;
		  return (ERROR);
		}
	    }
	  /* update or insert the value */
	  else 
	    {
	      /* PrintError("Updating or inserting value.\n"); */

	      /* Easiest to do 2 separate statements to distinguish
		 null vs. not-null overwrite flag */
	      if (header->is_overwrite)
		overwrite = strdup (OVERWRITE_FLAG);
	      else
		overwrite = NULL;

		  EXEC SQL AT :current_dbsite EXECUTE
		    BEGIN
		    modify_r_base_raw (:siteDatatypeId,
				       :dataInterval, :start_date,
				       :end_date, :value,
				       :agencyId, :overwrite, NULL, 
				       :collectionId, :loadingId, :methodId, 
				       :computationId, 'Y');
	          END;
		  END-EXEC;

	      if ((result = SqlErrorHandler 
		   (FUNC_NAME, FALSE,
		    "Problem in modify_r_base_raw.")) != OK)
		{
		  EXEC SQL AT :current_dbsite ROLLBACK;
		  return (ERROR);
		} 
	    }
        }
    }

    /* Commit; stored procedure does not */
    EXEC SQL AT :current_dbsite COMMIT;
    result = SqlErrorHandler (FUNC_NAME, TRUE,
			      "Problem committing...\n");
    if (result != OK)
      return(ERROR); 
    
    return(OK);
}
