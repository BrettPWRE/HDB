set switchvariables(0) {}

# new variables from output to input
set codes     {}
set wrongcodes {}
set nwrongcode 0
set ncode     0
set max      11
set k    0
set setquit 0
set visit {}

# original output variables
set visit {}
set number_of_entries 0
set model(0) {}
set modelId(0) {}
set nmodel 0
set nodata 0
set setzero 0
set startover 0
set modelRunIdArray {}
set modelSourceArray {}

# new variables that I added
set readmodel_modelId {}
set readmodel_name {}
set codesfound 0

set bitmap(exclam)	/usr/X/include/X11/bitmaps/Excl

##############################################################################
# Name : toperror
# Purpose : create a top level widget, display a message and waits for
#   one of the buttons to be pressed
# Input :
#   - msg : text to display
#   - cancel : 1 if a "cancel" button must be created
# Output :
#   - 0 if the "ok" button has been pressed, 1 if "cancel"
# Note : this function grabs the mouse
# History :
#   92/09/20 : pda@masi.ibp.fr, jt@ratp.fr : creation
#   92/09/21 : pda@masi.ibp.fr : added exclamation bitmap
##############################################################################

proc toperror {msg cancel} {
    global ok
    global bitmap

    #
    # Creation of the top level widget
    #

    catch {destroy .err}
    toplevel    .err
    wm title    .err "Message Dialog"
    wm iconname .err "message dialog"
    wm minsize  .err 10 10
    wm geometry .err 300x150+200+200

    #
    # Creation of the button(s)
    #

    frame .err.b
    button .err.b.ok -text "Ok" -width 8 -command {setOk 1}
    pack append .err.b \
	.err.b.ok {left expand fillx}
    if {$cancel == 1} then {
	button .err.b.cancel -text "Cancel" -width 8 -command {setOk 0}
	pack append .err.b \
	    .err.b.cancel {left expand fillx}
    }

    message .err.m -text $msg -aspect 1000 -justify center
    label   .err.l -bitmap @$bitmap(exclam)

    pack append .err \
	.err.m	{top expand fill} \
	.err.l  {top expand fill} \
	.err.b	{top fillx}
    
    #
    # Grab the mouse and wait for input
    #

    set wf [focus]
    focus .err.b
    bind .err.b <Key-Return> {setOk 1}

    raise .err .
    grab .err
    tkwait window .err

    if {[string compare $wf none] != 0} then {focus $wf}
    return $ok
}

proc setOk {val} {
    global ok
    set ok $val
    destroy .err
}

##############################################################################
# Name : readModelIds
# Purpose : read the current ka
# Input :
#   - file : file to read
# Output : -
# History :
#   92/09/13 : pda@masi.ibp.fr : creation
#   92/09/27 : pda@masi.ibp.fr : added file header
#   97/07/17 : nielsenn@fluvial.colorado.edu : rewrote to get rid of
#					       file swapping
##############################################################################

proc readModelIds {} {
    global codes ncode
    global nmodel modelId
    global defaults
    global nodata
    global readmodel_modelId readmodel_name

    set c 0
	#
	# Read the model
	#
    set ncode [llength $codes]
        # codes was read in the call to HDBTk_createModelmap at the beginning
        # of the Tk instructions


    if {$ncode == 0} then {
        toperror "No model data needed" 0
        set nodata 1
        PressedSearchButton
        return
    }
    set nmodel [llength $readmodel_modelId]

    if {$nmodel == 0} then {
        toperror "No model data needed" 0
        set nodata 1
        PressedSearchButton
        return
    } 

    for {set i 0} {$i < $nmodel} {incr i} {
        set first [lindex $readmodel_modelId $i]
	set second [lindex $readmodel_name $i]
	set modelId($i) "$first ---- $second"
    }
}


##############################################################################

proc PressedSearchButton {} {
    global number_of_entries
    global max
    global nodata
    global startover

    set str ""
    for {set i 0} {$i < $number_of_entries} {incr i} {
	set s [.c.bottommain.card.a[expr "$i / $max"].ent[expr "$i % $max"] get]
	set str [HDBTk_condenseData $str $s]
    }
    catch {destroy .buttons}
    catch {destroy .mesg}
    toplevel .mesg
    message .mesg.label -text "Searching...Wait please..." -width 8c \
        -justify left -font -Adobe-Helvetica-Medium-R-Normal--*-180-*
    wm geometry .mesg +470+250
    pack .mesg.label
    update idletasks
    HDBTk_StartSearchInput $str
    set number_of_entries 0

    # We need to pass mkwinBrowser how many centimeters to make the canvas,
    # and it turns out to be .7 centimeters per row
    mkwinBrowser [expr "[llength $DataList] / $max * .7 + 3"]
    fillwinBrowser .c.bottombrowser.card $DataList

    set n .buttonsbrowser
    frame $n    

    button $n.startover \
        -text "New Search" \
        -width 20 \
        -relief raised \
        -command reset

    button $n.exit \
        -text "EXIT DMI" \
        -width 20 \
        -relief raised \
        -command quit
    
    button $n.continue \
        -text "OK" \
        -width 20 \
        -relief raised \
        -command {getchoiceModelRun .c.bottombrowser.card}

    if {$nodata == 0} {
        pack append $n \
            $n.continue {right} \
            $n.exit {right} \
            $n.startover {right}
    } else {
        set msg "No model_run_ids found."
        message $n.mesg -text $msg -aspect 1000 -justify center
        pack append $n \
            $n.mesg  {bottom expand} \
            $n.startover {right} \
            $n.exit {right}
    }
    pack append . \
        $n {bottom fill}
    set startover 0
    return
}

##############################################################################
# Name : quit
# Purpose : quit this application
# Event : from the "quit" button in the main window
# Input : -
# Output : -
# History :
#   92/09/13 : pda@masi.ibp.fr : creation
#   92/09/20 : pda@masi.ibp.fr : completion
#   92/10/04 : pda@masi.ibp.fr : used modok procedure
##############################################################################

proc quit {} {
    global switchvariables
    global modelRunIdArray
    global ncode
    # sets model_run_id to -1, which is the option to quit
    HDBTk_SaveModelRunIdInput -1
    destroy .
}

proc continueWithC {} {
    destroy .
}

##############################################################################
# Name : listscroll
# Purpose : create a frame with a listbox and a scrollbar
# Input :
#   - w : name of the frame to create
# Output : -
# History :
#   92/09/26 : pda@masi.ibp.fr : creation
##############################################################################

proc listscroll {w} {
    frame $w
    scrollbar $w.yscroll -orient vertical -command "$w.lb yview"
    scrollbar $w.xscroll -orient horizontal -command "$w.lb xview"
    listbox $w.lb -yscrollcommand "$w.yscroll set" \
        -xscrollcommand "$w.xscroll set" -width 20 -height 15 -setgrid 1
    pack $w.yscroll -side right -fill y
    pack $w.xscroll -side bottom -fill x
    pack $w.lb -expand yes -fill y 
}

proc cardentry {c n sourcenumber} {
    global number_of_entries
    global switchvariables

    frame $c.a$n
    radiobutton $c.a$n.butn -text "$n" -variable \
        switchvariables($sourcenumber) -value $n
    pack append $c.a$n \
        $c.a$n.butn {left}

    # line things up correctly if there are more than 9 entries
    if {$n < 10} {
        entry $c.a$n.ent0 -relief sunken -width 5
    } else {
        entry $c.a$n.ent0 -relief sunken -width 4
    }

    pack append $c.a$n \
        $c.a$n.ent0 {left}
    incr number_of_entries

    entry $c.a$n.ent1 -relief sunken -width 4
    pack append $c.a$n \
        $c.a$n.ent1 {left}
    incr number_of_entries

    entry $c.a$n.ent2 -relief sunken -width 4
    pack append $c.a$n \
        $c.a$n.ent2 {left}
    incr number_of_entries

    entry $c.a$n.ent3 -relief sunken -width 12
    pack append $c.a$n \
        $c.a$n.ent3 {left}
    incr number_of_entries

    entry $c.a$n.ent4 -relief sunken -width 12
    pack append $c.a$n \
        $c.a$n.ent4 {left}
    incr number_of_entries

    entry $c.a$n.ent5 -relief sunken -width 4
    pack append $c.a$n \
        $c.a$n.ent5 {left}
    incr number_of_entries

    entry $c.a$n.ent6 -relief sunken -width 4
    pack append $c.a$n \
        $c.a$n.ent6 {left}
    incr number_of_entries

    entry $c.a$n.ent7 -relief sunken -width 4
    pack append $c.a$n \
        $c.a$n.ent7 {left}
    incr number_of_entries

    entry $c.a$n.ent8 -relief sunken -width 12
    pack append $c.a$n \
        $c.a$n.ent8 {left}
    incr number_of_entries

    entry $c.a$n.ent9 -relief sunken -width 12
    pack append $c.a$n \
        $c.a$n.ent9 {left}
    incr number_of_entries

    entry $c.a$n.ent10 -relief sunken -width 12
    pack append $c.a$n \
        $c.a$n.ent10 {left}
    incr number_of_entries

    pack append $c \
        $c.a$n {top fillx}
}

##############################################################################
# Name : createcard
# Purpose : create a frame with a card in it
# Input :
#   - c : name of a to be created frame
# Output : -
# History :
#   92/09/13 : pda@masi.ibp.fr : creation
#   92/09/26 : pda@masi.ibp.fr : call to cardfield
#   92/09/27 : pda@masi.ibp.fr : destroy frame first
##############################################################################

proc createcard {c} {
     catch {destroy $c}
     frame $c
     cardfield $c
}

##############################################################################
# Name : displayModelIds
# Purpose : display the current ka
# Input : -
# Output : -
# History :
#   92/09/27 : pda@masi.ibp.fr : creation
##############################################################################

proc displayModelIds {} {
    global ncode codes
    global nmodel modelId
    catch {destroy .c.bottommain.list.lbl1}
    catch {destroy .c.bottommain.list.lbl2}
    frame .c.bottommain.list.lbl1
    frame .c.bottommain.list.lbl2


    for {set i 0} {$i < $ncode} {incr i} {
        cardentry .c.bottommain.card $i $i
        .c.bottommain.card.a$i.butn configure -state disabled
        .c.bottommain.card.a$i.ent0 delete 0 end
        .c.bottommain.card.a$i.ent0 insert 0 [lindex $codes $i]
        .c.bottommain.card.a$i.ent0 configure -state disabled
    }

    .c.bottommain.list.lb delete 0 end
    .c.bottommain.list.lb insert end "Model     Model"
    .c.bottommain.list.lb insert end "Id           Name "
    for {set i 0} {$i < $nmodel} {incr i} {
	.c.bottommain.list.lb insert end $modelId($i)
    }
    pack before .c.bottommain.list \
	.c.bottommain.card {left expand fill}
}

##############################################################################
# Name : mkwin
# Purpose : create the main window
# Input : -
# Output : -
# History :
#   92/09/13 : pda@masi.ibp.fr : creation
#   92/10/03 : pda@masi.ibp.fr : added status line
##############################################################################

proc mkwin {} {
#       We need to initialize the global variables, just in case we are
#           re-searching...
    global visit
    global k
    global number_of_entries
    global max
    global model
    global modelId
    global nmodel
    global nodata
    global setzero
    global codesfound
    global startover
    global modelRunIdArray
    global modelSourceArray

    # new variables from output to input 
    set k    0
    set visit {}
    set number_of_entries 0
    set model(0) {}
    set modelId(0) {}
    set nmodel 0
    set nodata 0
    set setzero 0
    set startover 0
    set modelRunIdArray {}
    set modelSourceArray {}

    # new variables that I added
    set readmodel_modelId {}
    set readmodel_name {}
    set codesfound 0
    
    catch {destroy .c.bottombrowser}
    catch {destroy .buttonsbrowser}
    catch {destroy .c.bottombrowser.card}
    catch {destroy .guide}
    catch {destroy .mesg} 
    catch {destroy .c}
    catch {destroy .vscroll}
    catch {destroy .hscroll}
 
    canvas .c -scrollregion {0c 0c 30c 50c} -width 15c -height 10c \
        -relief sunken -borderwidth 2 \
        -xscrollcommand ".hscroll set" \
        -yscrollcommand ".vscroll set"
    scrollbar .vscroll -command ".c yview"
    scrollbar .hscroll -orient horiz -command ".c xview"
    pack .c -side top -expand yes -fill both 


    frame .buttons
    pack .buttons -side bottom -expand y -fill x -pady 2m
    button .buttons.search \
	-text "Search" \
	-width 20 \
	-relief raised \
	-command PressedSearchButton
    button .buttons.exit \
        -text "Exit DMI" \
        -width 20 \
        -relief raised \
        -command quit

    pack .buttons.search .buttons.exit -side left -expand 1

    frame .c.bottommain
    createcard .c.bottommain.card
    pack append .c.bottommain \
        .c.bottommain.card {left}

    listscroll .c.bottommain.list

    frame .guide1
    label .guide1.lbl2 -relief sunken -text "Specify model_run_id search parameters."
    pack append .guide1 \
        .guide1.lbl2 {left expand fillx}

    frame .guide2
    label .guide2.lbl1 -relief sunken -text "Start and End Date format: DD-MON-YYYY"
    pack append .guide2 \
        .guide2.lbl1 {left expand fillx}

    pack append .c.bottommain \
	.c.bottommain.card {left expand fill} \
	.c.bottommain.list {left expand fill} 

    pack append .c \
	.c.bottommain {expand fill} \
        .guide1 {fillx} \
        .guide2 {fillx}
 
    wm minsize . 10 5
    wm geometry . +0+0 
    wm title   . "Riverware Input DMI: Model Run Id Specification"
    wm protocol . WM_DELETE_WINDOW { quit }
}

##############################################################################

proc fillwinBrowser {c DataList} {
    global k
    global tmp
    global max
    global number_of_entries
    global setzero
    global nodata
    global startover
    global modelRunIdArray
    global modelSourceArray
    global switchvariables
    global codesfound

    set number_of_entries 0
    set i 0
    createcard $c
    pack append .c.bottombrowser \
        .c.bottombrowser.card {right expand fill}
 
    set sourcenumber 0
    set lastone [lindex $DataList 0]
    set current [lindex $DataList 0]
    lappend modelSourceArray [lindex $DataList 0]

    
    while {[lindex $DataList $i] != "ERR"} {
        if {[expr "$i % $max"] == 0} then {
            set current [lindex $DataList $i]
            if {$current != $lastone} {
                incr sourcenumber
                lappend modelSourceArray [lindex $DataList $i]
                set lastone [lindex $DataList $i]
            }
            cardentry $c [expr "$i / $max"] $sourcenumber
            set switchvariables($sourcenumber) -1
            incr k
	    lappend modelRunIdArray [lindex $DataList [expr "$i + 1"]]
        }
        $c.a[expr "$i / $max"].ent[expr "$i % $max"] delete 0 end
        $c.a[expr "$i / $max"].ent[expr "$i % $max"] insert 0 [lindex $DataList $i]
        $c.a[expr "$i / $max"].ent[expr "$i % $max"] configure -state disabled
        incr i
    }
    set codesfound [expr "$sourcenumber + 1"]
    catch {destroy .mesg}
    catch {destroy .c.bottommain}
    catch {destroy .guide1}
    catch {destroy .guide2}
    catch {destroy .guide3}
    catch {destroy .buttons}
    if {$number_of_entries == 0}  {
        catch {destroy .c.bottombrowser}
        set nodata 1
    } else {
        set startover 0
        .c create window 0c 0c -window .c.bottombrowser -anchor nw -tags item
        .c xview moveto 0
        .c yview moveto 0
    }       
    return
}

##############################################################################
proc getchoiceModelRun {c} {
    global number_of_entries
    global wrongcode
    global k
    global tmp
    global max
    global setzero
    global ncode
    global modelRunIdArray
    global modelSourceArray
    global switchvariables
    global codesfound

    set w .confirmation
    for {set i 0} {$i < $codesfound} {incr i} {
        if {$switchvariables($i) == -1} {
            toperror "Please check a row for each Model Source Code." 0
            return; 
        }

        HDBTk_SaveModelRunIdInput [lindex $modelRunIdArray \
            $switchvariables($i)] $i
    }
    catch {destroy $w}
    toplevel $w
    wm minsize	$w 10 10
    wm geometry $w +400+200
    wm protocol $w WM_DELETE_WINDOW { quit }

    frame  $w.buttons2
    button $w.buttons2.continue -text "Load data" -width 8 \
        -command continueWithC
    button $w.buttons2.exit -text "Exit DMI" -width 8 -command quit 
    button $w.buttons2.cancel -text "Cancel" \
        -width 8 -command {destroy .confirmation}
    pack append $w.buttons2 \
	$w.buttons2.continue		{left expand fill} \
	$w.buttons2.exit		{left expand fill} \
        $w.buttons2.cancel		{left expand fill} 

    pack append $w \
	$w.buttons2     {bottom fill}

    set str "Load data into RiverWare using the selected rows?"
    frame $w.lable1
    label $w.lable1.lbl1 -text $str -anchor w

    pack append $w.lable1 \
         $w.lable1.lbl1 {left}

    pack append $w \
         $w.lable1 {top expand}
    return
}   
proc notImplemented {} {
    catch {destroy .mesg}
    message .mesg -text "This is not implemented yet." -aspect 1000 -justify center
    pack append . \
        .mesg {top expand fill}
}

proc reset {} {
    global startover
    global number_of_entries
    global readmodel_modelId
    global readmodel_name
    set readmodel_modelId {}
    set readmodel_name {}
    set startover 1
    set number_of_entries 0
    HDBTk_createModelmap
    mkwin
    readModelIds
    displayModelIds
    bindentarray .c.bottommain.card  
    # Needed for Tk 3 new focus policy
    focus -lastfor .
}


##############################################################################
# Name : bindentarray
# Purpose : bind keys in an array of entry widgets
# Input :
#   - w : name of the existing frame containing $w.f$max.ent entry widgets
#   - PressedSearchButton : name of procedure to call when accepting the last entry
# Output : -
# History :
#   92/09/26 : pda@masi.ibp.fr : creation
##############################################################################

proc bindentarray {c} {
    global max
    global number_of_entries
    set edge 0

    if {$number_of_entries > 0} {
        for {set y 0} {$y < $number_of_entries / $max} {incr y} {
            for {set x 0} {$x < $max} {incr x} {

                set up [expr "$y - 1"]
                if {$up < 0} then {
                    set up [expr "$number_of_entries / $max - 1"]
                }
                
                set down [expr "$y + 1"]
                if {$down > [expr "$number_of_entries / $max - 1"]} then {
                    set down 0
                }

                set right [expr "$x + 1"]
                if {$right >= $max} then {
                    set right $edge
                }

                set left [expr "$x - 1"]
                if {$left < $edge} then {
                    set left [expr "$max - 1"]
                }

                bind $c.a$y.ent$x <Key-Return>     "focus $c.a$y.ent$right"
                bind $c.a$y.ent$x <Key-Tab>        "focus $c.a$y.ent$right"
                bind $c.a$y.ent$x <Key-Left>       "focus $c.a$y.ent$left"
                bind $c.a$y.ent$x <Key-Right>      "focus $c.a$y.ent$right"
                bind $c.a$y.ent$x <Key-Up>         "focus $c.a$up.ent$x"
                bind $c.a$y.ent$x <Key-Down>       "focus $c.a$down.ent$x"
            }
        }
        focus $c.a0.ent2
    }
}

##############################################################################
# Name : cardfield
# Purpose : create a frame with a field of a card in it
# Input :
#   - c : name of the frame containing all fields
#   - txt : name of the field
#   - ind : index of the field
#   - type : type of widget for fields (0 = label, 1 = entry)
# Output : -
# History :
#   92/09/26 : pda@masi.ibp.fr : creation
##############################################################################

proc cardfield {c} {
    frame $c.b

    frame $c.b.bb
    label $c.b.bb.lbl1 -anchor w -width 4
    pack append $c.b.bb \
        $c.b.bb.lbl1 {top}
    pack append $c.b \
        $c.b.bb {left}

    frame $c.b.b0
    label $c.b.b0.lbl1 -text "Model" -anchor w -width 6
    label $c.b.b0.lbl2 -text "Source" -anchor w -width 6
    label $c.b.b0.lbl3 -text "Code" -anchor w -width 6
    pack append $c.b.b0 \
        $c.b.b0.lbl1 {top} \
        $c.b.b0.lbl2 {top} \
        $c.b.b0.lbl3 {top}
    pack append $c.b \
        $c.b.b0 {left}

    frame $c.b.b1
    label $c.b.b1.lbl1 -text "Model" -anchor w -width 5
    label $c.b.b1.lbl2 -text "Run" -anchor w -width 5
    label $c.b.b1.lbl3 -text "Id" -anchor w -width 5
    pack append $c.b.b1 \
        $c.b.b1.lbl1 {top} \
        $c.b.b1.lbl2 {top} \
        $c.b.b1.lbl3 {top}
    pack append $c.b \
        $c.b.b1 {left}

    frame $c.b.b2
    label $c.b.b2.lbl1 -text "Model" -anchor w -width 7
    label $c.b.b2.lbl2 -text "Id " -anchor w -width 7
    label $c.b.b2.lbl3 -text " " -anchor w -width 7
    pack append $c.b.b2 \
        $c.b.b2.lbl1 {top} \
        $c.b.b2.lbl2 {top} \
        $c.b.b2.lbl3 {top}
    pack append $c.b \
        $c.b.b2 {left}

    frame $c.b.b3
    label $c.b.b3.lbl1 -text " " -anchor w -width 12
    label $c.b.b3.lbl2 -text "Sys Date " -anchor w -width 12
    label $c.b.b3.lbl3 -text " " -anchor w -width 12
    pack append $c.b.b3 \
        $c.b.b3.lbl1 {top} \
        $c.b.b3.lbl2 {top} \
        $c.b.b3.lbl3 {top}
    pack append $c.b \
        $c.b.b3 {left}

    frame $c.b.b4
    label $c.b.b4.lbl1 -text " " -anchor w -width 11
    label $c.b.b4.lbl2 -text "Run Date " -anchor w -width 11
    label $c.b.b4.lbl3 -text " " -anchor w -width 11
    pack append $c.b.b4 \
        $c.b.b4.lbl1 {top} \
        $c.b.b4.lbl2 {top} \
        $c.b.b4.lbl3 {top}
    pack append $c.b \
        $c.b.b4 {left}

    frame $c.b.b5
    label $c.b.b5.lbl1 -text " " -anchor w -width 4
    label $c.b.b5.lbl2 -text "Prob" -anchor w -width 4
    label $c.b.b5.lbl3 -text " " -anchor w -width 4
    pack append $c.b.b5 \
        $c.b.b5.lbl1 {top} \
        $c.b.b5.lbl2 {top} \
        $c.b.b5.lbl3 {top}
    pack append $c.b \
        $c.b.b5 {left}

    frame $c.b.b6
    label $c.b.b6.lbl1 -text "Model" -anchor w -width 5
    label $c.b.b6.lbl2 -text "Type * " -anchor w -width 5
    label $c.b.b6.lbl3 -text " " -anchor w -width 5
    pack append $c.b.b6 \
        $c.b.b6.lbl1 {top} \
        $c.b.b6.lbl2 {top} \
        $c.b.b6.lbl3 {top}
    pack append $c.b \
        $c.b.b6 {left}

    frame $c.b.b7
    label $c.b.b7.lbl1 -text "User" -anchor w -width 6
    label $c.b.b7.lbl2 -text "Id" -anchor w -width 6
    label $c.b.b7.lbl3 -text " " -anchor w -width 6
    pack append $c.b.b7 \
        $c.b.b7.lbl1 {top} \
        $c.b.b7.lbl2 {top} \
        $c.b.b7.lbl3 {top}
    pack append $c.b \
        $c.b.b7 {left}

    frame $c.b.b8
    label $c.b.b8.lbl1 -text " " -anchor w -width 13
    label $c.b.b8.lbl2 -text "Start Date" -anchor w -width 13
    label $c.b.b8.lbl3 -text " " -anchor w -width 13
    pack append $c.b.b8 \
        $c.b.b8.lbl1 {top} \
        $c.b.b8.lbl2 {top} \
        $c.b.b8.lbl3 {top}
    pack append $c.b \
        $c.b.b8 {left}

    frame $c.b.b9
    label $c.b.b9.lbl1 -text " " -anchor w -width 14
    label $c.b.b9.lbl2 -text "End Date" -anchor w -width 14
    label $c.b.b9.lbl3 -text " " -anchor w -width 14
    pack append $c.b.b9 \
        $c.b.b9.lbl1 {top} \
        $c.b.b9.lbl2 {top} \
        $c.b.b9.lbl3 {top}
    pack append $c.b \
        $c.b.b9 {left}

    frame $c.b.b10
    label $c.b.b10.lbl1 -text "Time" -anchor w -width 10
    label $c.b.b10.lbl2 -text "Step" -anchor w -width 10
    label $c.b.b10.lbl3 -text " " -anchor w -width 10
    pack append $c.b.b10 \
        $c.b.b10.lbl1 {top} \
        $c.b.b10.lbl2 {top} \
        $c.b.b10.lbl3 {top}
    pack append $c.b \
        $c.b.b10 {left}

    pack append $c \
        $c.b {top fillx}
}


##############################################################################
# Name : mkwinBrowser
# Purpose : create the main window
# Input : -
# Output : -
# History :
#   92/09/13 : pda@masi.ibp.fr : creation
#   92/10/03 : pda@masi.ibp.fr : added status line
##############################################################################

proc mkwinBrowser {canvas_size} {
    global nodata
    
    set x {}
    lappend x 0c 0c 25c ${canvas_size}c

    destroy .c
    destroy .vscroll
    destroy .hscroll
    canvas .c -scrollregion $x -width 15c \
        -height 10c -relief sunken -borderwidth 2 \
        -xscrollcommand ".hscroll set" \
        -yscrollcommand ".vscroll set"
    scrollbar .vscroll -command ".c yview"
    scrollbar .hscroll -orient horiz -command ".c xview"
    pack .c -side top -expand yes -fill both 
    
    frame .c.bottombrowser 
    frame .guide
    label .guide.lbl1 -relief sunken -text "Check model_run_id(s); one check per Model Source Code allowed"
    pack append .guide \
        .guide.lbl1 {left expand fillx}

    pack append .c \
        .vscroll {right filly} \
	.hscroll {bottom fillx} \
	.c.bottombrowser {top expand} \
        .guide {bottom fillx}
 
    wm minsize . 100 100
    wm geometry . =700x600
    wm title . "model_run_id selection for input"
    wm protocol . WM_DELETE_WINDOW { quit }
    update idletasks
}


# This call is to the C function in the file HDBTkFiles.sc.
# It replaces the createModelmap call originally called
# in the function readControlFile().  The call was moved here so
# that file swapping could be eliminated. This call puts information into the 
# "readcode", "readmodel_modelId", and "readmodel_name" Tcl variables.

HDBTk_createModelmap

mkwin

readModelIds
displayModelIds
bindentarray .c.bottommain.card 
# Needed for Tk 3 new focus policy
focus -lastfor .


